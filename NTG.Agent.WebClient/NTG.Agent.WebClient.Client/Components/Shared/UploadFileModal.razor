@if (IsVisible)
{
    <div class="modal fade show" style="display: block;" tabindex="-1">
        <div class="modal-dialog modal-lg">
            <div class="modal-content">
                <div class="modal-header">
                    <h5 class="modal-title">
                        <i class="bi bi-plus-circle me-2"></i>Attach files
                    </h5>
                    <button type="button" class="btn-close" @onclick="CloseModal"></button>
                </div>
                <div class="modal-body">
                    <div class="row">
                        <div class="col-12">

                            <!-- Upload Section -->
                            <div class="mb-4">
                                <h6 class="mb-3">
                                    <i class="bi bi-cloud-upload me-2"></i>Please choose your Files
                                </h6>
                                <div class="border border-dashed border-2 rounded p-4 text-center bg-light">
                                    <div class="mb-3">
                                        <i class="bi bi-file-earmark-arrow-up display-4 text-muted"></i>
                                    </div>
                                    <h6 class="mb-2">Drag and drop files here or click to browse</h6>
                                    <p class="text-muted small mb-3">@FileTypeService.GetSupportedDocumentFormatsDescription()</p>
                                    <InputFile OnChange="HandleFileUpload"
                                               class="form-control"
                                               multiple
                                               accept="@FileTypeService.GetSupportedDocumentFileExtensions()"
                                               id="fileUpload" />
                                </div>
                            </div>

                            <!-- Upload Status -->
                            @if (uploadItems.Any())
                            {
                                <div class="mb-3">
                                    <h6 class="mb-3">Upload Progress</h6>
                                    @foreach (var item in uploadItems)
                                    {
                                        <div class="card mb-2">
                                            <div class="card-body p-3">
                                                <div class="d-flex align-items-center">
                                                    <div class="me-3">
                                                        @if (item.Status == UploadStatus.Uploading)
                                                        {
                                                            <div class="spinner-border spinner-border-sm text-primary" role="status">
                                                                <span class="visually-hidden">Uploading...</span>
                                                            </div>
                                                        }
                                                        else if (item.Status == UploadStatus.Success)
                                                        {
                                                            <i class="bi bi-check-circle-fill text-success"></i>
                                                        }
                                                        else
                                                        {
                                                            <i class="bi bi-x-circle-fill text-danger"></i>
                                                        }
                                                    </div>
                                                    <div class="flex-grow-1">
                                                        <div class="fw-medium">@item.Name</div>
                                                        <small class="text-muted">@item.Message</small>
                                                    </div>
                                                    @if (item.Status == UploadStatus.Uploading)
                                                    {
                                                        <div class="progress" style="width: 100px;">
                                                            <div class="progress-bar" role="progressbar" style="width: @(item.Progress)%"></div>
                                                        </div>
                                                    }
                                                </div>
                                            </div>
                                        </div>
                                    }
                                </div>
                            }

                            @if (!string.IsNullOrEmpty(generalMessage))
                            {
                                <div class="alert @(isError ? "alert-danger" : "alert-success") d-flex align-items-center" role="alert">
                                    <i class="@(isError ? "bi bi-exclamation-triangle-fill" : "bi bi-check-circle-fill") me-2"></i>
                                    <div>@generalMessage</div>
                                </div>
                            }
                        </div>
                    </div>

                </div>
            </div>
        </div>
    </div>
    <div class="modal-backdrop fade show"></div>
}


@code {
    private string generalMessage = string.Empty;
    private bool isError = false;
    private List<UploadItemClient> uploadItems = new();
    private int MAX_FILE_UPLOAD = 10;

    [Parameter] public bool IsVisible { get; set; }

    [Parameter] public EventCallback<List<UploadItemClient>> OnUploadCompleted { get; set; }

    [Parameter] public EventCallback OnClose { get; set; }

    private void ResetModalState()
    {
        generalMessage = string.Empty;
        isError = false;
        uploadItems.Clear();
    }

    private async Task CloseModal()
    {
        ResetModalState();
        await OnClose.InvokeAsync();
    }

    private async Task HandleFileUpload(InputFileChangeEventArgs e)
    {
        generalMessage = string.Empty;

        try
        {
            var files = e.GetMultipleFiles(MAX_FILE_UPLOAD);

            foreach (var file in files)
            {
                var fileContent = new StreamContent(file.OpenReadStream(50 * 1024 * 1024));

                // Get content type from file or fallback to detection by extension
                var contentType = !string.IsNullOrEmpty(file.ContentType)
                    ? file.ContentType
                    : FileTypeService.GetContentType(file.Name);

                fileContent.Headers.ContentType = new System.Net.Http.Headers.MediaTypeHeaderValue(contentType);
                var uploadItem = new UploadItemClient
                    {
                        Name = file.Name,
                        Status = UploadStatus.Uploading,
                        Message = "Uploading...",
                        Progress = 0,
                        Content = fileContent
                    };
                uploadItems.Add(uploadItem);
                StateHasChanged();

                try
                {
                    // Simulate progress
                    for (int i = 0; i <= 100; i += 20)
                    {
                        uploadItem.Progress = i;
                        StateHasChanged();
                        await Task.Delay(200);
                    }

                    uploadItem.Status = UploadStatus.Success;
                    uploadItem.Message = "Successfully uploaded";
                }
                catch (Exception ex)
                {
                    uploadItem.Status = UploadStatus.Error;
                    uploadItem.Message = $"Error: {ex.Message}";
                }

                StateHasChanged();
            }

            // Clear upload items after a delay
            await Task.Delay(3000);
            await OnUploadCompleted.InvokeAsync(uploadItems);
            uploadItems.Clear();
        }
        catch (Exception ex)
        {
            generalMessage = $"Upload failed: {ex.Message}";
            isError = true;
        }
        finally
        {
            StateHasChanged();
        }
    }
}