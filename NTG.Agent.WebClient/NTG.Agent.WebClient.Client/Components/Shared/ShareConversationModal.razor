@using NTG.Agent.Shared.Dtos.SharedConversations
@inject SharedConversationClient SharedConversationClient
@inject NavigationManager NavigationManager
@inject IJSRuntime JS
@inject ILogger<ShareConversationModal> Logger

@if (IsVisible)
{
    <div class="modal-overlay" @onclick="CloseModal">
        <div class="share-modal" @onclick:stopPropagation>
            @if (!shareCreated)
            {
                <div class="share-modal-header">
                    <div class="share-modal-title-container">
                        <h3 class="modal-title">Share public link to @(ChatId.HasValue ? "message" : "chat")</h3>
                    </div>
                    <button class="close-button" @onclick="CloseModal">×</button>
                </div>
                <div class="share-warning">
                    <div class="warning-icon">⚠️</div>
                    <div>
                        <strong>This conversation may include personal information.</strong><br />
                        Take a moment to check the content before sharing the link.
                    </div>
                </div>
                <p class="share-description">
                    Your name, custom instructions, and any messages you add after sharing stay private. 
                    <a href="#" class="learn-more-link">Learn more</a>
                </p>
                <div class="share-expiration-container">
                    <label class="share-expiration-label">Link expires:</label>
                    <select class="share-expiration-select" @bind="selectedExpirationOption">
                        <option value="never">Never</option>
                        <option value="24hours">24 hours</option>
                        <option value="7days">7 days</option>
                        <option value="30days">30 days</option>
                    </select>
                </div>
                <div class="share-url-container">
                    <input type="text" class="share-url-input" value="@(NavigationManager.BaseUri.TrimEnd('/'))/share/..." readonly />
                    <button class="create-link-button" @onclick="CreateShareLink" disabled="@isCreatingLink">
                        @if (isCreatingLink)
                        {
                            <span>Creating...</span>
                        }
                        else
                        {
                            <span>Create link</span>
                        }
                    </button>
                </div>
            }
            else
            {
                <div class="share-modal-header">
                    <div class="share-modal-title-container">
                        <h3 class="modal-title">Public link created</h3>
                    </div>
                    <button class="close-button" @onclick="CloseModal">×</button>
                </div>
                <div class="share-warning">
                    <div class="warning-icon">⚠️</div>
                    <div>
                        <strong>This conversation may include personal information.</strong><br />
                        Take a moment to check the content before sharing the link.
                    </div>
                </div>
                <p class="share-success-description">
                    A public link to your @(ChatId.HasValue ? "message" : "chat") has been created. Manage previously shared chats at any time via Settings.
                </p>
                @if (selectedExpirationOption != "never")
                {
                    <p class="share-expiration-info">
                        <i class="bi bi-clock"></i>
                        This link will expire @GetExpirationText()
                    </p>
                }
                <div class="share-url-container">
                    <input type="text" class="share-url-input" value="@shareUrl" readonly />
                    <button class="copy-link-button @(linkCopied ? "copied" : "")" @onclick="CopyShareLink">
                        @if (linkCopied)
                        {
                            <i class="bi bi-check"></i>
                            <span>Copied!</span>
                        }
                        else
                        {
                            <i class="bi bi-copy"></i>
                            <span>Copy link</span>
                        }
                    </button>
                </div>
                <div class="share-social-buttons">
                    <button class="social-button linkedin" @onclick="@(() => ShareToSocial("linkedin"))">
                        <i class="bi bi-linkedin"></i>
                    </button>
                    <button class="social-button reddit" @onclick="@(() => ShareToSocial("reddit"))">
                        <i class="bi bi-reddit"></i>
                    </button>
                    <button class="social-button twitter" @onclick="@(() => ShareToSocial("twitter"))">
                        <i class="bi bi-twitter"></i>
                    </button>
                    <button class="social-button facebook" @onclick="@(() => ShareToSocial("facebook"))">
                        <i class="bi bi-facebook"></i>
                    </button>
                    <button class="social-button slack" @onclick="@(() => ShareToSocial("slack"))">
                        <i class="bi bi-slack"></i>
                    </button>
                </div>
            }
        </div>
    </div>
}

@code {
    [Parameter] public bool IsVisible { get; set; }
    [Parameter] public Guid? ConversationId { get; set; }
    [Parameter] public string? ConversationName { get; set; }
    [Parameter] public Guid? ChatId { get; set; }
    [Parameter] public EventCallback OnClose { get; set; }
    [Parameter] public EventCallback OnSharedConversationChanged { get; set; }

    private bool shareCreated = false;
    private bool isCreatingLink = false;
    private bool linkCopied = false;
    private string shareUrl = string.Empty;
    private string selectedExpirationOption = "never";

    protected override void OnParametersSet()
    {
        if (IsVisible && !shareCreated)
        {
            ResetModalState();
        }
    }

    private void ResetModalState()
    {
        shareCreated = false;
        isCreatingLink = false;
        linkCopied = false;
        shareUrl = string.Empty;
        selectedExpirationOption = "never";
    }

    private async Task CloseModal()
    {
        ResetModalState();
        await OnClose.InvokeAsync();
    }

    private async Task CreateShareLink()
    {
        if (!ConversationId.HasValue) return;

        try
        {
            isCreatingLink = true;
            StateHasChanged();

            var shareRequest = new ShareConversationRequest
            {
                ConversationId = ConversationId.Value,
                Name = ConversationName,
                ExpiresAt = selectedExpirationOption switch
                {
                    "24hours" => DateTime.UtcNow.AddDays(1),
                    "7days" => DateTime.UtcNow.AddDays(7),
                    "30days" => DateTime.UtcNow.AddDays(30),
                    _ => null
                },
                ChatId = ChatId
            };

            var shareId = await SharedConversationClient.ShareConversationAsync(shareRequest);
            
            var baseUrl = NavigationManager.BaseUri.TrimEnd('/');
            var trimmedShareId = shareId.Trim('"');

            shareUrl = $"{baseUrl}/share/{trimmedShareId}";
            
            shareCreated = true;
            await OnSharedConversationChanged.InvokeAsync();
        }
        catch (Exception ex)
        {
            Logger.LogError(ex, "Failed to create share link for conversation {ConversationId}", ConversationId);
        }
        finally
        {
            isCreatingLink = false;
            StateHasChanged();
        }
    }

    private async Task CopyShareLink()
    {
        try
        {
            await JS.InvokeVoidAsync("navigator.clipboard.writeText", shareUrl);
            linkCopied = true;
            StateHasChanged();

            // Reset the "Copied" state after 5 seconds
            await Task.Delay(5000);
            linkCopied = false;
            StateHasChanged();
        }
        catch (Exception ex)
        {
            Logger.LogError(ex, "Failed to copy share link to clipboard");
        }
    }

    private async Task ShareToSocial(string platform)
    {
        try
        {
            var encodedUrl = Uri.EscapeDataString(shareUrl);
            
            var socialUrl = platform switch
            {
                "linkedin" => $"https://www.linkedin.com/sharing/share-offsite/?url={encodedUrl}",
                "reddit" => $"https://www.reddit.com/submit?url={encodedUrl}",
                "twitter" => $"https://twitter.com/intent/tweet?url={encodedUrl}",
                "facebook" => $"https://www.facebook.com/sharer/sharer.php?u={encodedUrl}",
                "slack" => shareUrl, // For Slack, just copy the URL
                _ => shareUrl
            };

            if (platform == "slack")
            {
                await JS.InvokeVoidAsync("navigator.clipboard.writeText", shareUrl);
            }
            else
            {
                await JS.InvokeVoidAsync("open", socialUrl, "_blank");
            }
        }
        catch (Exception ex)
        {
            Logger.LogError(ex, "Failed to share to {Platform}", platform);
        }
    }

    private string GetExpirationText()
    {
        return selectedExpirationOption switch
        {
            "24hours" => "in 24 hours",
            "7days" => "in 7 days",
            "30days" => "in 30 days",
            _ => ""
        };
    }
}
