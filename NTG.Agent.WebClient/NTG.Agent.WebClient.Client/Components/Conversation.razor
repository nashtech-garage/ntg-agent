@attribute [Authorize]

@using NTG.Agent.Shared.Dtos.Chats
@using Microsoft.AspNetCore.Components
@inject IJSRuntime JS
@inject ConversationClient ConversationClient
@inject NavigationManager Navigation

<div class="conversation-sidebar">
    <div class="new-chat-section">
        <a href="/" class="new-chat-button">
            <svg class="new-chat-icon" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2">
                <path d="M12 5v14M5 12h14"></path>
            </svg>
            New Chat
        </a>
    </div>

    <div class="chat-history-section">
        <h5 class="section-title">Chat History</h5>

        @if (conversations.Any())
        {
            <ul class="conversation-list">
                @foreach (var conversation in conversations)
                {
                    <li class="conversation-item" @onmouseenter="() => ShowMenu(conversation.Id)" @onmouseleave="HideMenu">
                        <a href="/c/@conversation.Id"
                           class="conversation-link @(IsActiveConversation(conversation.Id) ? "active" : "")"
                           @onclick="() => SetActiveConversation(conversation.Id)">
                            <div class="conversation-content">
                                @if (renamingConversationId == conversation.Id)
                                {
                                    <input @ref="renameInputRef"
                                           class="conversation-name-input"
                                           @bind="renameValue"
                                           @bind:event="oninput"
                                           @onkeydown="HandleRenameKeyDown"
                                           @onblur="CancelRename"
                                           @onclick:stopPropagation />
                                }
                                else
                                {
                                    <div class="conversation-name">@conversation.Name</div>
                                }
                            </div>
                        </a>
                        <div class="menu-toggle" @onclick:stopPropagation @onclick="() => ToggleMenu(conversation.Id)"
                             style="display: @(hoveredConversationId == conversation.Id && renamingConversationId != conversation.Id ? "inline-block" : "none")">
                            <span class="dot-icon">⋯</span>
                        </div>
                        @if (contextMenuConversationId == conversation.Id)
                        {
                            <div class="context-menu">
                                <button class="rename-conversation" @onclick="() => RenameConversation(conversation.Id, conversation.Name)"><i class="bi bi-pencil-square"></i> Rename</button>
                                <button class="delete-conversation" @onclick="() => DeleteConversation(conversation.Id)"><i class="bi bi-trash3"></i> Delete</button>
                            </div>
                        }
                    </li>

                }
            </ul>
        }
        else
        {
            <div class="empty-state">
                <div class="empty-state-text">No conversations yet</div>
                <div class="empty-state-subtext">Start a new chat to begin</div>
            </div>
        }
    </div>
</div>

@if (showDeleteConfirmation)
{
    <div class="modal-overlay" @onclick="CancelDelete">
        <div class="delete-confirmation-modal" @onclick:stopPropagation="true">
            <h3 class="modal-title">Delete chat?</h3>
            <p class="modal-message">
                This will delete <strong>@conversationToDelete?.Name</strong>.
            </p>
            <p class="modal-submessage">
                This action cannot be undone.
            </p>
            <div class="modal-actions">
                <button class="cancel-button" @onclick="CancelDelete">Cancel</button>
                <button class="delete-button" @onclick="ConfirmDelete">Delete</button>
            </div>
        </div>
    </div>
}

@code {
    private IList<ConversationListItem> conversations = [];
    private Guid? activeConversationId = null;
    private Guid? hoveredConversationId;
    private Guid? contextMenuConversationId;
    private Guid? renamingConversationId;
    private string renameValue = string.Empty;
    private ElementReference renameInputRef;
    private bool showDeleteConfirmation = false;
    private ConversationListItem? conversationToDelete;

    protected override async Task OnInitializedAsync()
    {
        UpdateActiveConversationFromUrl();
        conversations = await ConversationClient.GetConversationsAsync();
    }

    private void UpdateActiveConversationFromUrl()
    {
        var currentUri = Navigation.Uri;
        var uriSegments = currentUri.Split('/');

        // Look for /c/{id} pattern
        for (int i = 0; i < uriSegments.Length - 1; i++)
        {
            if (uriSegments[i] == "c" && i + 1 < uriSegments.Length)
            {
                if (Guid.TryParse(uriSegments[i + 1], out var id))
                {
                    activeConversationId = id;
                }
                return;
            }
        }
        activeConversationId = null;
    }

    private bool IsActiveConversation(Guid conversationId)
    {
        return activeConversationId == conversationId;
    }

    private void SetActiveConversation(Guid conversationId)
    {
        activeConversationId = conversationId;
        StateHasChanged();
    }

    private void ShowMenu(Guid conversationId)
    {
        hoveredConversationId = conversationId;
    }

    private void HideMenu()
    {
        hoveredConversationId = null;
    }

    private async void ToggleMenu(Guid conversationId)
    {
        if (contextMenuConversationId == conversationId)
        {
            contextMenuConversationId = null;
            await JS.InvokeVoidAsync("removeClickOutsideHandler");
        }
        else
        {
            contextMenuConversationId = conversationId;
            await JS.InvokeVoidAsync("registerClickOutsideHandler", DotNetObjectReference.Create(this));
        }
    }

    private async Task RenameConversation(Guid conversationId, string currentName)
    {
        contextMenuConversationId = null;
        renamingConversationId = conversationId;
        renameValue = currentName;
        StateHasChanged();

        // Focus the input after rendering
        await Task.Delay(50);
        await renameInputRef.FocusAsync();
    }

    private async Task HandleRenameKeyDown(KeyboardEventArgs e)
    {
        if (e.Key == "Enter")
        {
            await ConfirmRename();
        }
        else if (e.Key == "Escape")
        {
            CancelRename();
        }
    }

    private async Task ConfirmRename()
    {
        if (renamingConversationId.HasValue && !string.IsNullOrWhiteSpace(renameValue))
        {
            try
            {
                await ConversationClient.UpdateConversationAsync(renamingConversationId.Value, renameValue.Trim());
                // Since ConversationListItem is a record type, we need to replace it entirely
                conversations = conversations.Select(c => c.Id == renamingConversationId.Value
                    ? new ConversationListItem(c.Id, renameValue.Trim())
                    : c).ToList();
            }
            catch (Exception ex)
            {
                // TODO: Handle error - could show a toast notification
                Console.WriteLine($"Failed to rename conversation: {ex.Message}");
            }
        }

        CancelRename();
    }

    private void CancelRename()
    {
        renamingConversationId = null;
        renameValue = string.Empty;
        StateHasChanged();
    }

    private async Task DeleteConversation(Guid conversationId)
    {
        contextMenuConversationId = null;
        conversationToDelete = conversations.FirstOrDefault(c => c.Id == conversationId);
        showDeleteConfirmation = true;
        await JS.InvokeVoidAsync("hideInputChatContainer");
        StateHasChanged();
    }

    private async Task CancelDelete()
    {
        showDeleteConfirmation = false;
        conversationToDelete = null;
        await JS.InvokeVoidAsync("showInputChatContainer");
        StateHasChanged();
    }

    private async Task ConfirmDelete()
    {
        if (conversationToDelete != null)
        {
            try
            {
                await ConversationClient.DeleteConversationAsync(conversationToDelete.Id);
                conversations = conversations.Where(c => c.Id != conversationToDelete.Id).ToList();

                // If we deleted the active conversation, navigate to home
                if (activeConversationId == conversationToDelete.Id)
                {
                    Navigation.NavigateTo("/");
                }
            }
            catch (Exception ex)
            {
                // TODO: Handle error - could show a toast notification
                Console.WriteLine($"Error: Failed to delete conversation. Exception: {ex.Message}");
            }
        }

        showDeleteConfirmation = false;
        conversationToDelete = null;
        await JS.InvokeVoidAsync("showInputChatContainer");
        StateHasChanged();
    }

    [JSInvokable]
    public void OnOutsideClick()
    {
        contextMenuConversationId = null;
        StateHasChanged();
    }

    public async ValueTask DisposeAsync()
    {
        await JS.InvokeVoidAsync("removeClickOutsideHandler");
    }
}