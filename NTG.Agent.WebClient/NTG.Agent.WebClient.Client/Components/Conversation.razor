@attribute [Authorize]

@using NTG.Agent.Shared.Dtos.Chats
@using NTG.Agent.Shared.Dtos.SharedConversations
@using NTG.Agent.WebClient.Client.Components.Shared
@using Microsoft.AspNetCore.Components
@using System.Threading
@inject ILogger<Conversation> Logger
@inject IJSRuntime JS
@inject ConversationClient ConversationClient
@inject SharedConversationClient SharedConversationClient
@inject NavigationManager Navigation
@inject ConversationState ConversationState

<div class="conversation-sidebar @(IsSidebarCollapsed ? "collapsed" : "")" @onclick="CloseSettingsMenuIfOpen">
    <div class="conversation-header">
        <div class="header-content">
            <div class="app-logo">
                <img src="@Assets["img/icon.png"]" class="img img-responsive" alt="NTG Agent - Chat" />
                <span class="app-title">NTG Agent</span>
            </div>
        </div>
        <div class="header-controls">
            <!-- Mobile close button -->
            <button class="mobile-close-btn" onclick="closeMobileMenu()" aria-label="Close menu">
                <svg xmlns="http://www.w3.org/2000/svg" width="20" height="20" fill="currentColor" viewBox="0 0 16 16">
                    <path d="M2.146 2.854a.5.5 0 1 1 .708-.708L8 7.293l5.146-5.147a.5.5 0 0 1 .708.708L8.707 8l5.147 5.146a.5.5 0 0 1-.708.708L8 8.707l-5.146 5.147a.5.5 0 0 1-.708-.708L7.293 8 2.146 2.854Z"/>
                </svg>
            </button>
            
            <div class="sidebar-toggle">
                <button @onclick="ToggleSidebar" class="toggle-btn" aria-label="@(IsSidebarCollapsed ? "Expand sidebar" : "Collapse sidebar")" title="@(IsSidebarCollapsed ? "Expand sidebar" : "Collapse sidebar")">
                    <svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" fill="currentColor" viewBox="0 0 16 16" class="toggle-icon">
                        <path fill-rule="evenodd" d="@(IsSidebarCollapsed ? "M3.646 1.646a.5.5 0 0 1 .708 0l6 6a.5.5 0 0 1 0 .708l-6 6a.5.5 0 0 1-.708-.708L9.293 8 3.646 2.354a.5.5 0 0 1 0-.708z" : "M9.354 1.646a.5.5 0 0 0-.708 0l-6 6a.5.5 0 0 0 0 .708l6 6a.5.5 0 0 0 .708-.708L4.707 8l4.647-5.646a.5.5 0 0 0 0-.708z")" />
                    </svg>
                </button>
            </div>
        </div>
    </div>
    
    <ConversationAction 
        IsSidebarCollapsed="IsSidebarCollapsed" 
        OnActiveConversationChanged="HandleActiveConversationChanged" />

    <div class="chat-history-section">
        <h5 class="section-title">Chat History</h5>

        @if (conversations.Any())
        {
            <ul class="conversation-list">
                @foreach (var conversation in conversations)
                {
                    <li class="conversation-item" @onmouseenter="() => ShowMenu(conversation.Id)" @onmouseleave="HideMenu">
                        <a href="/c/@conversation.Id"
                           class="conversation-link @(IsActiveConversation(conversation.Id) ? "active" : "")"
                           @onclick="() => SetActiveConversation(conversation.Id)">
                            <div class="conversation-content">
                                @if (renamingConversationId == conversation.Id)
                                {
                                    <input @ref="renameInputRef"
                                           class="conversation-name-input"
                                           @bind="renameValue"
                                           @bind:event="oninput"
                                           @onkeydown="HandleRenameKeyDown"
                                           @onblur="CancelRename"
                                           @onclick:stopPropagation />
                                }
                                else
                                {
                                    <div class="conversation-name">@conversation.Name</div>
                                }
                            </div>
                        </a>
                        <div class="menu-toggle" @onclick:stopPropagation @onclick="() => ToggleMenu(conversation.Id)"
                             style="display: @(hoveredConversationId == conversation.Id && renamingConversationId != conversation.Id ? "inline-block" : "none")">
                            <span class="dot-icon">⋯</span>
                        </div>
                        @if (contextMenuConversationId == conversation.Id)
                        {
                            <div class="context-menu">
                                <button class="rename-conversation" @onclick="() => RenameConversation(conversation.Id, conversation.Name)"><i class="bi bi-pencil-square"></i> Rename</button>
                                <button class="delete-conversation" @onclick="() => DeleteConversation(conversation.Id)"><i class="bi bi-trash3"></i> Delete</button>
                                <button class="share-conversation" @onclick="() => ShareConversation(conversation.Id, conversation.Name)"><i class="bi bi-share"></i> Share</button>
                            </div>
                        }
                    </li>

                }
            </ul>
        }
        else
        {
            <div class="empty-state">
                <div class="empty-state-text">No conversations yet</div>
                <div class="empty-state-subtext">Start a new chat to begin</div>
            </div>
        }
    </div>
    
    <div class="sidebar-footer">
        <div class="settings-container" @onclick:stopPropagation>
            <button class="settings-button footer-settings" @onclick="ToggleSettingsMenu" title="Settings">
                <i class="bi bi-gear"></i>
                <span class="settings-text">Settings</span>
            </button>
            @if (showSettingsMenu)
            {
                <div class="settings-dropdown" @onclick:stopPropagation>
                    <button class="dropdown-item" @onclick="OpenManageSharedModal">
                        <i class="bi bi-share"></i>
                        <span>Manage Shared Conversations</span>
                    </button>
                </div>
            }
        </div>
    </div>
</div>

@if (showManageSharedModal)
{
    <SharedConversationManager OnClose="CloseManageSharedModal" OnSharedConversationChanged="HandleSharedConversationChanged" />
}

@if (showDeleteConfirmation)
{
    <div class="modal-overlay" @onclick="CancelDelete">
        <div class="delete-confirmation-modal" @onclick:stopPropagation>
            <h3 class="modal-title">Delete chat?</h3>
            <p class="modal-message">
                This will delete <strong>@conversationToDelete?.Name</strong>.
            </p>
            <p class="modal-submessage">
                This action cannot be undone.
            </p>
            <div class="modal-actions">
                <button class="cancel-button" @onclick="CancelDelete">Cancel</button>
                <button class="delete-button" @onclick="ConfirmDelete">Delete</button>
            </div>
        </div>
    </div>
}

@if (showShareModal)
{
    <ShareConversationModal IsVisible="showShareModal" 
                            ConversationId="@(shareConversationRequest?.ConversationId ?? Guid.Empty)" 
                            ConversationName="@(shareConversationRequest?.Name ?? "")"
                            ChatId=null
                            OnClose="CancelShare" 
                            OnSharedConversationChanged="HandleSharedConversationChanged" />
}

@code {
    private IList<ConversationListItem> conversations = [];
    private Guid? activeConversationId = null;
    private Guid? hoveredConversationId;
    private Guid? contextMenuConversationId;
    private Guid? renamingConversationId;
    private string renameValue = string.Empty;
    private ElementReference renameInputRef;
    private bool showDeleteConfirmation = false;
    private ConversationListItem? conversationToDelete;
    private bool IsSidebarCollapsed { get; set; } = false;

    private bool showShareModal = false;
    private ShareConversationRequest? shareConversationRequest = null;
    
    // Manage shared conversations modal
    private bool showManageSharedModal = false;
    
    // Settings dropdown menu
    private bool showSettingsMenu = false;

    protected override async Task OnInitializedAsync()
    {
        await LoadAndActiveConversations();
        ConversationState.OnConversationAdded += HandleConversationAdded;
        Navigation.LocationChanged += HandleLocationChanged;
        await LoadSidebarStateAsync();
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            Navigation.LocationChanged += HandleLocationChanged;
        }

        await base.OnAfterRenderAsync(firstRender);
    }

    private async void HandleLocationChanged(object? sender, LocationChangedEventArgs e)
    {
        UpdateActiveConversationFromUrl();
        await JS.InvokeVoidAsync("updateSidebarState", IsSidebarCollapsed);
        await InvokeAsync(StateHasChanged);
    }

    #region Load Conversations
    private async Task LoadAndActiveConversations()
    {
        UpdateActiveConversationFromUrl();
        conversations = await ConversationClient.GetConversationsAsync();
    }
    #endregion
    #region Active Conversation Item
    private void UpdateActiveConversationFromUrl()
    {
        var currentUri = Navigation.Uri;
        var uriSegments = currentUri.Split('/');

        // Look for /c/{id} pattern
        for (int i = 0; i < uriSegments.Length - 1; i++)
        {
            if (uriSegments[i] == "c" && i + 1 < uriSegments.Length)
            {
                if (Guid.TryParse(uriSegments[i + 1], out var id))
                {
                    activeConversationId = id;
                }
                return;
            }
        }
        activeConversationId = null;
    }

    private bool IsActiveConversation(Guid conversationId)
    {
        return activeConversationId == conversationId;
    }

    private void SetActiveConversation(Guid conversationId)
    {
        activeConversationId = conversationId;
        StateHasChanged();
    }

    private void HandleActiveConversationChanged(Guid? conversationId)
    {
        activeConversationId = conversationId;
        StateHasChanged();
    }

    private async void HandleConversationAdded()
    {
        // Handle conversation added event
        await LoadAndActiveConversations();
        StateHasChanged();
    }
    public void Dispose()
    {
        ConversationState.OnConversationAdded -= HandleConversationAdded;
    }

    #endregion

    #region Handle Context Menu
    private void ShowMenu(Guid conversationId)
    {
        hoveredConversationId = conversationId;
    }

    private void HideMenu()
    {
        hoveredConversationId = null;
    }

    private async void ToggleMenu(Guid conversationId)
    {
        if (contextMenuConversationId == conversationId)
        {
            contextMenuConversationId = null;
            await JS.InvokeVoidAsync("removeClickOutsideHandler");
        }
        else
        {
            contextMenuConversationId = conversationId;
            await JS.InvokeVoidAsync("registerClickOutsideHandler", DotNetObjectReference.Create(this));
        }
    }

    [JSInvokable]
    public void OnOutsideClick()
    {
        contextMenuConversationId = null;
        StateHasChanged();
    }

    public async ValueTask DisposeAsync()
    {
        // Unregister from location changes
        Navigation.LocationChanged -= HandleLocationChanged;
        await JS.InvokeVoidAsync("removeClickOutsideHandler");
    }
    #endregion

    #region Rename Conversation
    private async Task RenameConversation(Guid conversationId, string currentName)
    {
        contextMenuConversationId = null;
        renamingConversationId = conversationId;
        renameValue = currentName;
        StateHasChanged();

        // Focus the input after rendering
        await Task.Delay(50);
        await renameInputRef.FocusAsync();
    }

    private async Task HandleRenameKeyDown(KeyboardEventArgs e)
    {
        if (e.Key == "Enter")
        {
            await ConfirmRename();
        }
        else if (e.Key == "Escape")
        {
            CancelRename();
        }
    }

    private async Task ConfirmRename()
    {
        if (renamingConversationId.HasValue && !string.IsNullOrWhiteSpace(renameValue))
        {
            try
            {
                await ConversationClient.UpdateConversationAsync(renamingConversationId.Value, renameValue.Trim());
                conversations = conversations.Select(c => c.Id == renamingConversationId.Value
                    ? new ConversationListItem(c.Id, renameValue.Trim())
                    : c).ToList();
            }
            catch (Exception ex)
            {
                Logger.LogError(ex, "Failed to rename conversation");
            }
        }

        CancelRename();
    }

    private void CancelRename()
    {
        renamingConversationId = null;
        renameValue = string.Empty;
        StateHasChanged();
    }

    #endregion

    #region Delete A Conversation
    private async Task DeleteConversation(Guid conversationId)
    {
        contextMenuConversationId = null;
        conversationToDelete = conversations.FirstOrDefault(c => c.Id == conversationId);
        showDeleteConfirmation = true;
        await JS.InvokeVoidAsync("hideInputChatContainer");
        StateHasChanged();
    }

    private async Task CancelDelete()
    {
        showDeleteConfirmation = false;
        conversationToDelete = null;
        await JS.InvokeVoidAsync("showInputChatContainer");
        StateHasChanged();
    }

    private async Task ConfirmDelete()
    {
        if (conversationToDelete != null)
        {
            try
            {
                await ConversationClient.DeleteConversationAsync(conversationToDelete.Id);
                conversations = conversations.Where(c => c.Id != conversationToDelete.Id).ToList();

                if (activeConversationId == conversationToDelete.Id)
                {
                    Navigation.NavigateTo("/");
                }
            }
            catch (Exception ex)
            {
                Logger.LogError(ex, "Error: Failed to delete conversation.");
            }
        }

        showDeleteConfirmation = false;
        conversationToDelete = null;
        await JS.InvokeVoidAsync("showInputChatContainer");
        StateHasChanged();
    }
    #endregion

    #region Share Conversation
    private async Task ShareConversation(Guid conversationId, string conversationName)
    {
        contextMenuConversationId = null;
        shareConversationRequest = new ShareConversationRequest();
        shareConversationRequest.ConversationId = conversationId;
        shareConversationRequest.Name = conversationName;

        showShareModal = true;
        await JS.InvokeVoidAsync("hideInputChatContainer");
        StateHasChanged();
    }

    private async Task CancelShare()
    {
        showShareModal = false;
        shareConversationRequest = null;
        await JS.InvokeVoidAsync("showInputChatContainer");
        StateHasChanged();
    }
    #endregion

    #region Toggle Slide Bar
    private async Task LoadSidebarStateAsync()
    {
        try
        {
            IsSidebarCollapsed = await JS.InvokeAsync<bool>("getSidebarState");
        }
        catch (Exception ex)
        {
            Logger.LogError(ex, "Error loading sidebar state");
            IsSidebarCollapsed = false;
        }
    }

    private async Task SaveSidebarStateAsync()
    {
        try
        {
            await JS.InvokeVoidAsync("setSidebarState", IsSidebarCollapsed);
        }
        catch (Exception ex)
        {
            Logger.LogError(ex, "Error saving sidebar state");
        }
    }

    private async Task ToggleSidebar()
    {
        IsSidebarCollapsed = !IsSidebarCollapsed;
        await SaveSidebarStateAsync();
        await JS.InvokeVoidAsync("updateSidebarState", IsSidebarCollapsed);
    }
    #endregion

    #region Manage Shared Conversations Modal
    private void ToggleSettingsMenu()
    {
        showSettingsMenu = !showSettingsMenu;
        StateHasChanged();
    }

    private void CloseSettingsMenuIfOpen()
    {
        if (showSettingsMenu)
        {
            showSettingsMenu = false;
            StateHasChanged();
        }
    }

    private async Task OpenManageSharedModal()
    {
        showSettingsMenu = false;
        showManageSharedModal = true;
        await JS.InvokeVoidAsync("hideInputChatContainer");
        StateHasChanged();
    }

    private async Task CloseManageSharedModal()
    {
        showManageSharedModal = false;
        await JS.InvokeVoidAsync("showInputChatContainer");
        StateHasChanged();
    }

    private void HandleSharedConversationChanged()
    {
        StateHasChanged();
    }
    #endregion
}