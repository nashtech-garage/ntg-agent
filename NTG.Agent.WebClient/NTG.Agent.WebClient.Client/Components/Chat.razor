@using NTG.Agent.Shared.Dtos.Chats

@inject ChatClient ChatClient
@inject NavigationManager Navigation
@inject ConversationClient ConversationClient

<div class="mt-4">
    <h2>Let's Chat</h2>
</div>
<div class="chat-container">
    @foreach (var item in chatHistory)
    {
        if (item.IsSystem)
        {
            <div class="p-2 w-100">
                <EnhancedMarkdown Value="@item.Message" @ref="MarkdownSetValue" CssClass="p-2 rounded rounded-4 border chat-response"></EnhancedMarkdown>
            </div>
        }
        else
        {
            <div class="text-end p-2 w-100">
                <span class="text-white bg-primary p-2 rounded rounded-4">
                    @item.Message
                </span>
            </div>
        }
    }
</div>
<div class="form-group row">
    <div class="col-8 col-md-6 col-sm-8 m-auto fixed-bottom">
        <div class="input-group mb-3 offset-md-2">
            <input type="text"
            id="userInput"
            class="form-control rounded rounded-4"
            @bind="userInput"
            @onkeydown="@Enter"
            @bind:event="oninput"
            placeholder="Type your message..." />
            <div class="input-group-append">
                <button class="btn" @onclick="SendMessage" type="button" aria-label="Send message">
                    <svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" fill="grey" class="bi bi-send" viewBox="0 0 16 16">
                        <path d="M15.854.146a.5.5 0 0 1 .11.54l-5.819 14.547a.75.75 0 0 1-1.329.124l-3.178-4.995L.643 7.184a.75.75 0 0 1 .124-1.33L15.314.037a.5.5 0 0 1 .54.11ZM6.636 10.07l2.761 4.338L14.13 2.576zm6.787-8.201L1.591 6.602l4.339 2.76z" />
                    </svg>
                </button>
            </div>
        </div>
    </div>
</div>

@code {

    [Parameter]
    public Guid? ConversationId { get; set; }

    private string userInput = string.Empty;
    private List<ChatMessage> chatHistory = new List<ChatMessage>();
    private EnhancedMarkdown? MarkdownSetValue { get; set; }

    private async Task SendMessage()
    {
        if (string.IsNullOrWhiteSpace(userInput))
        {
            return;
        }

        if (!ConversationId.HasValue)
        {
            var conversation = await ConversationClient.Create();
            ConversationId = conversation.Id;
        }

        chatHistory.Add(new ChatMessage { IsSystem = false, Message = userInput });

        var response = new ChatMessage { IsSystem = true, Message = "<b>Agent</b>: " };
        chatHistory.Add(response);
        StateHasChanged();

        var result = await ChatClient.InvokeStreamAsync(new PromptRequest(userInput, ConversationId.Value));
        userInput = string.Empty;

        await foreach (var item in result)
        {
            response.Message += item.Content;
            await Task.Delay(1);
            await MarkdownSetValue!.SetValue(response.Message);
        }
    }

    public async Task Enter(KeyboardEventArgs e)
    {
        if (e.Code == "Enter" || e.Code == "NumpadEnter")
        {
            await SendMessage();
        }
    }

    class ChatMessage
    {
        public bool IsSystem { get; set; }
        public string Message { get; set; } = string.Empty;
    }
}
