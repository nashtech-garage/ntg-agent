@using NTG.Agent.Shared.Dtos.Chats
@inject ChatClient ChatClient
@inject NavigationManager Navigation
@inject ConversationClient ConversationClient
@inject ConversationState ConversationState
@inject IJSRuntime JSRuntime
@inject AuthenticationStateProvider AuthenticationStateProvider


@if (unauthorized)
{
    <div class="d-flex flex-column justify-content-center align-items-center" style="height: 70vh;">
        <h2 class="mb-4">Unauthorized</h2>
        <p class="text-muted">You are not authorized to view this conversation.</p>
        <button class="btn btn-primary" @onclick="@GoHome">Go to Home</button>
    </div>
}
else if (ConversationId.HasValue)
{
    <div class="chat-container">
        @foreach (var item in chatHistory)
        {
            if (item.Role == 2) // Assistant message
            {
                <div class="p-2 w-100">
                    <EnhancedMarkdown Value="@item.Content" @ref="MarkdownSetValue"
                        CssClass="p-2 rounded rounded-4 border chat-response"></EnhancedMarkdown>
                    <div class="chat-actions mt-2 ms-2">
                        <button class="btn btn-sm btn-outline-secondary me-2" @onclick="@(() => ToggleLike(item))" title="Like">
                            <i
                                class="bi @(item.Reaction == ReactionType.Like ? "bi-hand-thumbs-up-fill" : "bi-hand-thumbs-up")"></i>
                        </button>
                        <button class="btn btn-sm btn-outline-secondary me-2" @onclick="@(() => ToggleDislike(item))"
                            title="Dislike">
                            <i
                                class="bi @(item.Reaction == ReactionType.Dislike ? "bi-hand-thumbs-down-fill" : "bi-hand-thumbs-down")"></i>
                        </button>
                        <button class="btn btn-sm btn-outline-secondary" @onclick="@(() => ToggleComment(item))" title="Comment">
                            <i class="bi bi-chat-dots"></i>
                        </button>
                    </div>
                    @if (showCommentFor == item.Id)
                    {
                        <div class="comment-section mt-2 ms-2">
                            <div class="input-group input-group-sm">
                                <input type="text" class="form-control" placeholder="Add a comment..." @bind="currentComment" />
                                <button class="btn btn-outline-primary" type="button" @onclick="@(() => SaveComment(item))">
                                    <i class="bi bi-check"></i>
                                </button>
                            </div>
                        </div>
                    }
                </div>
            }
            else
            {
                <div class="text-end p-2 w-100">
                    <span class="text-white bg-primary p-2 rounded rounded-4">
                        @item.Content
                    </span>
                </div>
            }
        }
    </div>
    <div class="form-group row">
        <div class="col-8 col-md-6 col-sm-8 m-auto fixed-bottom" id="inputChatContainer">
            <div class="input-group mb-3">
                <input type="text" id="userInput" class="form-control rounded rounded-4" @bind="userInput"
                    @onkeydown="@Enter" @bind:event="oninput" autocomplete="off" spellcheck="false" autocorrect="off"
                    autocapitalize="off" placeholder="Type your message..." />
                <div class="input-group-append">
                    <SpeechToText Language="@Language" OnTranscription="HandleTranscription" />
                    <button class="btn" @onclick="SendMessage" type="button" aria-label="Send message" title="Send message">
                        <i class="bi bi-send fs-6"></i>
                    </button>
                </div>
            </div>
        </div>
    </div>
}
else
{
    <div class="d-flex flex-column justify-content-center align-items-center" style="height: 70vh;">
        <h2 class="mb-4">What can I help with?</h2>
        <div class="form-group w-100">
            <div class="col-8 col-md-6 col-sm-8 mx-auto" id="inputChatContainer">
                <div class="input-group mb-3">
                    <input type="text" id="userInput" class="form-control rounded rounded-4" @bind="userInput"
                        @onkeydown="@Enter" @bind:event="oninput" autocomplete="off" spellcheck="false" autocorrect="off"
                        autocapitalize="off" placeholder="Ask anything" />
                    <div class="input-group-append">
                        <SpeechToText Language="@Language" OnTranscription="HandleTranscription" />
                        <button class="btn" @onclick="SendMessage" type="button" aria-label="Send message"
                            title="Send message">
                            <i class="bi bi-send fs-6"></i>
                        </button>
                    </div>
                </div>
            </div>
        </div>
    </div>
}

@code {

    [Parameter]
    public Guid? ConversationId { get; set; }

    [Parameter]
    public string? Language { get; set; } = "en-US";

    private string userInput = string.Empty;
    private List<ChatMessageListItem> chatHistory = new List<ChatMessageListItem>();
    private EnhancedMarkdown? MarkdownSetValue { get; set; }
    private string currentSessionId = string.Empty;
    private bool isAuthenticated = false;
    private bool unauthorized = false;
    private Guid? showCommentFor = null;
    private string currentComment = string.Empty;

    protected override async Task OnInitializedAsync()
    {
        var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
        isAuthenticated = authState.User.Identity?.IsAuthenticated ?? false;

        if (ConversationId.HasValue)
        {
            if (!isAuthenticated)
            {
                currentSessionId = await JSRuntime.InvokeAsync<string>("sessionStorage.getItem", "CurrentSessionId");
            }
            try
            {
                var chatMessages = await ConversationClient.GetConversationMessagesAsync(ConversationId.Value, currentSessionId);
                chatHistory.AddRange(chatMessages);
            }
            catch (UnauthorizedAccessException)
            {
                unauthorized = true;
            }
        }
    }


    private async Task SendMessage()
    {
        if (string.IsNullOrWhiteSpace(userInput))
        {
            return;
        }
        var newConversation = false;
        if (!ConversationId.HasValue)
        {
            if (!isAuthenticated)
            {
                currentSessionId = Guid.NewGuid().ToString();
                await JSRuntime.InvokeVoidAsync("sessionStorage.setItem", "CurrentSessionId", currentSessionId);
            }
            var conversation = await ConversationClient.Create(currentSessionId);
            ConversationId = conversation.Id;
            newConversation = true;
        }

        var query = userInput.Trim();
        chatHistory.Add(new ChatMessageListItem { Role = 0, Content = query });

        var response = new ChatMessageListItem { Role = 2, Content = "One moment, the agent is thinking ..." };

        chatHistory.Add(response);
        userInput = string.Empty;
        StateHasChanged();

        var result = await ChatClient.InvokeStreamAsync(new PromptRequest(query, ConversationId.Value, currentSessionId));
        response.Content = string.Empty;
        await foreach (var item in result)
        {
            response.Content += item.Content;
            await Task.Delay(1);
            await MarkdownSetValue!.SetValue(response.Content);
        }

        if (newConversation)
        {
            // Fire Conversation Added event
            ConversationState.NotifyConversationAdded();
            // Update the URL
            Navigation.NavigateTo($"/c/{ConversationId}", false);
        }
    }

    public async Task Enter(KeyboardEventArgs e)
    {
        if (e.Code == "Enter" || e.Code == "NumpadEnter")
        {
            await SendMessage();
        }
    }

    private void HandleTranscription(string result)
    {
        userInput = result;
        StateHasChanged();
    }

    private void GoHome()
    {
        Navigation.NavigateTo("/", true);
    }

    private async Task ToggleLike(ChatMessageListItem message)
    {
        var newReaction = message.Reaction == ReactionType.Like ? ReactionType.None : ReactionType.Like;
        var success = await ConversationClient.UpdateMessageReactionAsync(ConversationId.Value, message.Id, newReaction);
        if (success)
        {
            message.Reaction = newReaction;
            StateHasChanged();
        }
    }

    private async Task ToggleDislike(ChatMessageListItem message)
    {
        var newReaction = message.Reaction == ReactionType.Dislike ? ReactionType.None : ReactionType.Dislike;
        var success = await ConversationClient.UpdateMessageReactionAsync(ConversationId.Value, message.Id, newReaction);
        if (success)
        {
            message.Reaction = newReaction;
            StateHasChanged();
        }
    }

    private void ToggleComment(ChatMessageListItem message)
    {
        if (showCommentFor == message.Id)
        {
            showCommentFor = null;
            currentComment = string.Empty;
        }
        else
        {
            showCommentFor = message.Id;
            currentComment = message.UserComment;
        }
        StateHasChanged();
    }

    private async Task SaveComment(ChatMessageListItem message)
    {
        var success = await ConversationClient.UpdateMessageCommentAsync(ConversationId.Value, message.Id, currentComment);
        if (success)
        {
            message.UserComment = currentComment;
            showCommentFor = null;
            currentComment = string.Empty;
            StateHasChanged();
        }
    }
}
