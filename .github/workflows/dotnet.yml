# This workflow will build a .NET project
# For more information see: https://docs.github.com/en/actions/automating-builds-and-tests/building-and-testing-net

name: Ntg-agent Github Action to Build & Test

on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]

jobs:
  build:

    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v4
    - name: Setup .NET
      uses: actions/setup-dotnet@v4
      with:
        dotnet-version: 9.0.x
    - name: Restore dependencies
      run: dotnet restore
    - name: Build
      run: dotnet build --no-restore
    - name: Test
      run: dotnet test --no-build --verbosity normal
   
    # Prerequisites:
    # 1. Sign up for SonarCloud and create a project.
    # 2. Get your SonarCloud organization key and project key.
    # 3. Create a GitHub Secret named SONAR_TOKEN with your SonarCloud user token.
    #    Create a GitHub Secret as SONARCLOUD_ORGANIZATION_KEY with your SonarCloud project settings.
    #    Create a GitHub Secret as SONAR_PROJECT_KEY with your SonarCloud project settings.
    # 4. (Optional for SonarCloud, mandatory for self-hosted SonarQube) Create a GitHub Secret named SONAR_HOST_URL.
    #    For SonarCloud, the host is https://sonarcloud.io
    #    For SonarQube, it would be your self-hosted instance URL.
    - name: Set up SonarScanner for .NET
      shell: bash
      run: |
        dotnet tool install --global dotnet-sonarscanner --version 6.* 
      # Use the recommended version for your SonarQube/Cloud
  
    - name: Begin SonarCloud Analysis
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }} # Needed for GitHub Actions integration
        SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
        SONARCLOUD_ORGANIZATION_KEY: ${{secrets.SONARCLOUD_ORGANIZATION_KEY}}
        SONAR_PROJECT_KEY: ${{secrets.SONAR_PROJECT_KEY}}
        # SONAR_HOST_URL: ${{ secrets.SONAR_HOST_URL }} # Uncomment for self-hosted SonarQube
      run: |
        dotnet sonarscanner begin \
          /o:"$SONARCLOUD_ORGANIZATION_KEY" \
          /k:"$SONAR_PROJECT_KEY" \
          /d:sonar.cs.roslyn.reportFilePath="sonar-roslyn.json" \
          /d:sonar.cs.opencover.reportsPaths="**/TestResults/**/coverage.opencover.xml" \
          /d:sonar.qualitygate.wait=true # Wait for Quality Gate status

    - name: Run Tests with Coverage (for SonarCloud)
      run: dotnet test --configuration Release --no-build --collect:"XPlat Code Coverage" -- DataCollectionRunSettings.Arguments.CollectProcessorData=True --DataCollectionRunSettings.Arguments.Format=json -- DataCollectionRunSettings.Arguments.OutputDirectory="TestResults"

    - name: End SonarCloud Analysis
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
        # SONAR_HOST_URL: ${{ secrets.SONAR_HOST_URL }} # Uncomment for self-hosted SonarQube
      run: dotnet sonarscanner end

