@using Microsoft.EntityFrameworkCore
@rendermode InteractiveServer
@attribute [Authorize(Roles = "Admin")]
@inject UserManager<ApplicationUser> UserManager
@inject ILogger<UserTab> Logger
@inject AuthenticationStateProvider AuthenticationStateProvider

@if (isLoading)
{
    <div class="d-flex justify-content-center">
        <div class="spinner-border" role="status">
            <span class="visually-hidden">Loading...</span>
        </div>
    </div>
}
else if (!string.IsNullOrWhiteSpace(errorMessage) && string.IsNullOrWhiteSpace(infoMessage))
{
    <div class="p-4">
        <div class="alert alert-danger" role="alert">
            <h4 class="alert-heading">Error</h4>
            <p>@errorMessage</p>
        </div>
    </div>
}
else
{
    <div class="p-2 p-md-4">
        <div class="d-flex flex-column flex-md-row justify-content-between align-items-start align-items-md-center mb-3 mb-md-4">
            <h3 class="mb-2 mb-md-0">Users Management</h3>
            <button class="btn btn-primary btn-sm btn-md-normal" @onclick="ShowCreateUserModal">
                <i class="bi bi-person-plus me-2"></i>Create New User
            </button>
        </div>

        @if (!string.IsNullOrWhiteSpace(infoMessage))
        {
            <div class="alert alert-info alert-dismissible fade show" role="alert">
                @((MarkupString)infoMessage)
                <button type="button" class="btn-close" @onclick="() => infoMessage = null"></button>
            </div>
        }
        @if (!string.IsNullOrWhiteSpace(errorMessage))
        {
            <div class="alert alert-danger alert-dismissible fade show" role="alert">
                @errorMessage
                <button type="button" class="btn-close" @onclick="() => errorMessage = null"></button>
            </div>
        }

        <!-- Search and Filter -->
        <div class="row mb-3">
            <div class="col-12 col-md-6 mb-2 mb-md-0">
                <div class="input-group">
                    <span class="input-group-text"><i class="bi bi-search"></i></span>
                    <input type="text" class="form-control" placeholder="Search by name, email, or username..."
                           @bind="searchTerm" @bind:event="oninput" @onkeyup="FilterUsers" />
                </div>
            </div>
            <div class="col-12 col-md-6">
                <select class="form-select" @bind="selectedFilter" @bind:after="FilterUsers">
                    <option value="all">All Users</option>
                    <option value="confirmed">Email Confirmed</option>
                    <option value="unconfirmed">Email Not Confirmed</option>
                    <option value="locked">Locked Out</option>
                </select>
            </div>
        </div>

        <!-- Desktop Users Table -->
        <div class="table-responsive d-none d-md-block">
            <table class="table table-striped table-hover">
                <thead class="table-light">
                    <tr>
                        <th>First Name</th>
                        <th>Last Name</th>
                        <th>Email</th>
                        <th>Username</th>
                        <th>Phone Number</th>
                        <th>Email Confirmed</th>
                        <th>Lockout End</th>
                        <th>Created</th>
                        <th style="width: 200px;">Actions</th>
                    </tr>
                </thead>
                <tbody>
                    @if (filteredUsers != null)
                    {
                        @foreach (var user in filteredUsers)
                        {
                            @if (user != null)
                            {
                                <tr>
                                    <td>@(user.FirstName ?? "-")</td>
                                    <td>@(user.LastName ?? "-")</td>
                                    <td>@(user.Email ?? "N/A")</td>
                                    <td>@(user.UserName ?? "N/A")</td>
                                    <td>@(user.PhoneNumber ?? "-")</td>
                                    <td>
                                        @if (user.EmailConfirmed)
                                        {
                                            <span class="badge bg-success">
                                                <i class="bi bi-check-circle me-1"></i>Confirmed
                                            </span>
                                        }
                                        else
                                        {
                                            <span class="badge bg-warning">
                                                <i class="bi bi-exclamation-circle me-1"></i>Not Confirmed
                                            </span>
                                        }
                                    </td>
                                    <td>
                                        @if (user.LockoutEnd.HasValue && user.LockoutEnd > DateTimeOffset.Now)
                                        {
                                            <span class="badge bg-danger">
                                                <i class="bi bi-lock me-1"></i>Locked until @user.LockoutEnd.Value.ToString("MM/dd/yyyy HH:mm")
                                            </span>
                                        }
                                        else
                                        {
                                            <span class="badge bg-success">
                                                <i class="bi bi-unlock me-1"></i>Active
                                            </span>
                                        }
                                    </td>
                                    <td>@DateTime.Now.ToString("MM/dd/yyyy")</td>
                                    <td>
                                        <div class="btn-group btn-group-sm" role="group">
                                            <button class="btn btn-outline-primary" @onclick="() => EditUser(user)">
                                                <i class="bi bi-pencil"></i>
                                            </button>
                                            @if (!user.EmailConfirmed)
                                            {
                                                <button class="btn btn-outline-success" @onclick="() => ConfirmEmail(user)">
                                                    <i class="bi bi-check-circle"></i>
                                                </button>
                                            }
                                            @if (user.Id != currentUserId)
                                            {
                                                @if (user.LockoutEnd.HasValue && user.LockoutEnd > DateTimeOffset.Now)
                                                {
                                                    <button class="btn btn-outline-warning" @onclick="() => UnlockUser(user)">
                                                        <i class="bi bi-unlock"></i>
                                                    </button>
                                                }
                                                else
                                                {
                                                    <button class="btn btn-outline-warning" @onclick="() => LockUser(user)">
                                                        <i class="bi bi-lock"></i>
                                                    </button>
                                                }
                                                <button class="btn btn-outline-danger" @onclick="() => ShowDeleteConfirmation(user)">
                                                    <i class="bi bi-trash"></i>
                                                </button>
                                            }
                                        </div>
                                    </td>
                                </tr>
                            }
                        }
                    }
                </tbody>
            </table>
        </div>

        <!-- Mobile Users Cards -->
        <div class="d-block d-md-none">
            @if (filteredUsers != null)
            {
                @foreach (var user in filteredUsers)
                {
                    @if (user != null)
                    {
                        <div class="card user-card mb-3">
                            <div class="card-body">
                                <div class="row">
                                    <div class="col-12">
                                        <h6 class="card-title mb-2">
                                            @(user.FirstName ?? "-") @(user.LastName ?? "-")
                                        </h6>
                                        <div class="user-details">
                                            <div class="detail-item">
                                                <span class="detail-label">Email:</span>
                                                <span class="detail-value">@(user.Email ?? "N/A")</span>
                                            </div>
                                            <div class="detail-item">
                                                <span class="detail-label">Username:</span>
                                                <span class="detail-value">@(user.UserName ?? "N/A")</span>
                                            </div>
                                            @if (!string.IsNullOrEmpty(user.PhoneNumber))
                                            {
                                                <div class="detail-item">
                                                    <span class="detail-label">Phone:</span>
                                                    <span class="detail-value">@user.PhoneNumber</span>
                                                </div>
                                            }
                                            <div class="detail-item">
                                                <span class="detail-label">Email Status:</span>
                                                @if (user.EmailConfirmed)
                                                {
                                                    <span class="badge bg-success">
                                                        <i class="bi bi-check-circle me-1"></i>Confirmed
                                                    </span>
                                                }
                                                else
                                                {
                                                    <span class="badge bg-warning">
                                                        <i class="bi bi-exclamation-circle me-1"></i>Not Confirmed
                                                    </span>
                                                }
                                            </div>
                                            <div class="detail-item">
                                                <span class="detail-label">Account Status:</span>
                                                @if (user.LockoutEnd.HasValue && user.LockoutEnd > DateTimeOffset.Now)
                                                {
                                                    <span class="badge bg-danger">
                                                        <i class="bi bi-lock me-1"></i>Locked
                                                    </span>
                                                }
                                                else
                                                {
                                                    <span class="badge bg-success">
                                                        <i class="bi bi-unlock me-1"></i>Active
                                                    </span>
                                                }
                                            </div>
                                        </div>
                                        <div class="card-actions mt-3">
                                            <div class="btn-group-mobile">
                                                <button class="btn btn-outline-primary btn-sm" @onclick="() => EditUser(user)">
                                                    <i class="bi bi-pencil me-1"></i>Edit
                                                </button>
                                                @if (!user.EmailConfirmed)
                                                {
                                                    <button class="btn btn-outline-success btn-sm" @onclick="() => ConfirmEmail(user)">
                                                        <i class="bi bi-check-circle me-1"></i>Confirm
                                                    </button>
                                                }
                                                @if (user.Id != currentUserId)
                                                {
                                                    @if (user.LockoutEnd.HasValue && user.LockoutEnd > DateTimeOffset.Now)
                                                    {
                                                        <button class="btn btn-outline-warning btn-sm" @onclick="() => UnlockUser(user)">
                                                            <i class="bi bi-unlock me-1"></i>Unlock
                                                        </button>
                                                    }
                                                    else
                                                    {
                                                        <button class="btn btn-outline-warning btn-sm" @onclick="() => LockUser(user)">
                                                            <i class="bi bi-lock me-1"></i>Lock
                                                        </button>
                                                    }
                                                    <button class="btn btn-outline-danger btn-sm" @onclick="() => ShowDeleteConfirmation(user)">
                                                        <i class="bi bi-trash me-1"></i>Delete
                                                    </button>
                                                }
                                            </div>
                                        </div>
                                    </div>
                                </div>
                            </div>
                        </div>
                    }
                }
            }
        </div>

        @if (filteredUsers == null || !filteredUsers.Any())
        {
            <div class="text-center py-4">
                <i class="bi bi-people display-1 text-muted"></i>
                <p class="text-muted mt-2">No users found matching your search criteria.</p>
            </div>
        }
    </div>
}

<!-- Create/Edit User Modal -->
@if (showUserModal)
{
    <div class="modal fade show d-block" tabindex="-1" style="background-color: rgba(0,0,0,0.5);">
        <div class="modal-dialog">
            <div class="modal-content">
                <div class="modal-header">
                    <h5 class="modal-title">@(isEditMode ? "Edit User" : "Create New User")</h5>
                    <button type="button" class="btn-close" @onclick="CloseUserModal"></button>
                </div>
                <div class="modal-body">
                    <div>
                        <div class="row">
                            <div class="col-md-6">
                                <div class="mb-3">
                                    <label class="form-label">First Name</label>
                                    <InputText class="form-control" @bind-Value="userModel.FirstName" placeholder="Enter first name" />
                                </div>
                            </div>
                            <div class="col-md-6">
                                <div class="mb-3">
                                    <label class="form-label">Last Name</label>
                                    <InputText class="form-control" @bind-Value="userModel.LastName" placeholder="Enter last name" />
                                </div>
                            </div>
                        </div>

                        <div class="mb-3">
                            <label class="form-label">Email *</label>
                            @if (isEditMode)
                            {
                                <input type="email" class="form-control" value="@userModel.Email" readonly />
                                <div class="form-text">Email address cannot be changed after user creation.</div>
                            }
                            else
                            {
                                <InputText class="form-control" @bind-Value="userModel.Email" placeholder="user@example.com" />
                                @if (string.IsNullOrEmpty(userModel.Email))
                                {
                                    <div class="text-danger">Email is required.</div>
                                }
                            }
                        </div>

                        <div class="mb-3">
                            <label class="form-label">Username *</label>
                            <InputText class="form-control" @bind-Value="userModel.UserName" placeholder="username" />
                            @if (string.IsNullOrEmpty(userModel.UserName))
                            {
                                <div class="text-danger">Username is required.</div>
                            }
                        </div>

                        @if (!isEditMode)
                        {
                            <div class="mb-3">
                                <label class="form-label">Password *</label>
                                <InputText type="password" class="form-control" @bind-Value="userModel.Password" placeholder="Enter password" />
                                @if (string.IsNullOrEmpty(userModel.Password))
                                {
                                    <div class="text-danger">Password is required.</div>
                                }
                                else if (userModel.Password.Length < 6)
                                {
                                    <div class="text-danger">Password must be at least 6 characters long.</div>
                                }
                            </div>

                            <div class="mb-3">
                                <label class="form-label">Confirm Password *</label>
                                <InputText type="password" class="form-control" @bind-Value="userModel.ConfirmPassword" placeholder="Confirm password" />
                                @if (string.IsNullOrEmpty(userModel.ConfirmPassword))
                                {
                                    <div class="text-danger">Password confirmation is required.</div>
                                }
                                else if (userModel.Password != userModel.ConfirmPassword)
                                {
                                    <div class="text-danger">Passwords do not match.</div>
                                }
                            </div>
                        }

                        <div class="mb-3">
                            <label class="form-label">Phone Number</label>
                            <InputText class="form-control" @bind-Value="userModel.PhoneNumber" placeholder="+1234567890" />
                        </div>

                        <div class="mb-3">
                            <div class="form-check">
                                <InputCheckbox class="form-check-input" @bind-Value="userModel.EmailConfirmed" />
                                <label class="form-check-label">
                                    Email Confirmed
                                </label>
                            </div>
                        </div>

                        <div class="modal-footer">
                            <button type="button" class="btn btn-secondary" @onclick="CloseUserModal">Cancel</button>
                            <button type="button" class="btn btn-primary" @onclick="SaveUser" disabled="@(!IsFormValid())">
                                @(isEditMode ? "Update User" : "Create User")
                            </button>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>
}

<!-- Delete Confirmation Modal -->
@if (showDeleteModal)
{
    <div class="modal fade show d-block" tabindex="-1" style="background-color: rgba(0,0,0,0.5);">
        <div class="modal-dialog">
            <div class="modal-content">
                <div class="modal-header">
                    <h5 class="modal-title">Confirm Delete</h5>
                    <button type="button" class="btn-close" @onclick="CloseDeleteModal"></button>
                </div>
                <div class="modal-body">
                    <p>Are you sure you want to delete the user <strong>@userToDelete?.Email</strong>?</p>
                    <p class="text-danger">This action cannot be undone.</p>
                </div>
                <div class="modal-footer">
                    <button type="button" class="btn btn-secondary" @onclick="CloseDeleteModal">Cancel</button>
                    <button type="button" class="btn btn-danger" @onclick="DeleteUserConfirmed">
                        <i class="bi bi-trash me-2"></i>Delete User
                    </button>
                </div>
            </div>
        </div>
    </div>
}

@code {
    private bool isLoading = true;
    private List<ApplicationUser> users = new();
    private List<ApplicationUser> filteredUsers = new();
    private string searchTerm = string.Empty;
    private string selectedFilter = "all";
    private string? currentUserId;

    private string? infoMessage;
    private string? errorMessage;

    // Modal states
    private bool showUserModal = false;
    private bool showDeleteModal = false;
    private bool isEditMode = false;
    private ApplicationUser? userToDelete;
    private UserModel userModel = new();

    protected override async Task OnInitializedAsync()
    {
        try
        {
            var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
            if (!authState.User.Identity?.IsAuthenticated == true)
            {
                errorMessage = "You must be logged in to access this page.";
                isLoading = false;
                return;
            }

            if (!authState.User.IsInRole("Admin"))
            {
                errorMessage = "You must have Admin role to access user management.";
                isLoading = false;
                return;
            }

            // Get current user ID
            currentUserId = UserManager.GetUserId(authState.User);

            await LoadUsersAsync();
        }
        catch (Exception ex)
        {
            Logger.LogError(ex, "Error during initialization");
            errorMessage = $"Initialization failed: {ex.Message}";
            isLoading = false;
        }
    }

    private async Task LoadUsersAsync()
    {
        try
        {
            isLoading = true;
            ClearMessages();
            
            if (UserManager == null)
            {
                errorMessage = "User manager is not available.";
                return;
            }

            users = await (UserManager.Users?.OrderBy(u => u.Email)?.ToListAsync() ?? Task.FromResult(new List<ApplicationUser>()));
            filteredUsers = users;
            FilterUsers();
        }
        catch (Exception ex)
        {
            Logger.LogError(ex, "Failed to load users");
            errorMessage = $"Failed to load users: {ex.Message}";
            users = new List<ApplicationUser>();
            filteredUsers = new List<ApplicationUser>();
        }
        finally
        {
            isLoading = false;
            StateHasChanged();
        }
    }

    private void FilterUsers()
    {
        if (users == null)
        {
            filteredUsers = new List<ApplicationUser>();
            StateHasChanged();
            return;
        }

        filteredUsers = users.Where(u =>
            u != null &&
            (string.IsNullOrEmpty(searchTerm) ||
             (u.Email?.Contains(searchTerm, StringComparison.OrdinalIgnoreCase) == true) ||
             (u.UserName?.Contains(searchTerm, StringComparison.OrdinalIgnoreCase) == true) ||
             (u.FirstName?.Contains(searchTerm, StringComparison.OrdinalIgnoreCase) == true) ||
             (u.LastName?.Contains(searchTerm, StringComparison.OrdinalIgnoreCase) == true)) &&
            selectedFilter switch
            {
                "confirmed" => u.EmailConfirmed,
                "unconfirmed" => !u.EmailConfirmed,
                "locked" => u.LockoutEnd.HasValue && u.LockoutEnd > DateTimeOffset.Now,
                _ => true
            }
        ).ToList();

        StateHasChanged();
    }

    private void ShowCreateUserModal()
    {
        userModel = new UserModel { IsEditMode = false };
        isEditMode = false;
        showUserModal = true;
        ClearMessages();
    }

    private void EditUser(ApplicationUser user)
    {
        userModel = new UserModel
        {
            Id = user.Id,
            FirstName = user.FirstName,
            LastName = user.LastName,
            Email = user.Email!,
            UserName = user.UserName!,
            PhoneNumber = user.PhoneNumber,
            EmailConfirmed = user.EmailConfirmed,
            IsEditMode = true
        };
        isEditMode = true;
        showUserModal = true;
        ClearMessages();
    }

    private async Task SaveUser()
    {
        try
        {
            if (isEditMode)
            {
                var user = await UserManager.FindByIdAsync(userModel.Id!);
                if (user == null)
                {
                    errorMessage = "User not found.";
                    return;
                }
                user.FirstName = userModel.FirstName;
                user.LastName = userModel.LastName;
                user.UserName = userModel.UserName;
                user.PhoneNumber = userModel.PhoneNumber;
                user.EmailConfirmed = userModel.EmailConfirmed;

                var result = await UserManager.UpdateAsync(user);
                if (result.Succeeded)
                {
                    infoMessage = $"User <strong>{user.Email}</strong> updated successfully.";
                    CloseUserModal();
                    await LoadUsersAsync();
                }
                else
                {
                    errorMessage = string.Join("; ", result.Errors.Select(e => e.Description));
                }
            }
            else
            {
                var user = new ApplicationUser
                {
                    FirstName = userModel.FirstName,
                    LastName = userModel.LastName,
                    Email = userModel.Email,
                    UserName = userModel.UserName,
                    PhoneNumber = userModel.PhoneNumber,
                    EmailConfirmed = userModel.EmailConfirmed
                };

                var result = await UserManager.CreateAsync(user, userModel.Password!);
                if (result.Succeeded)
                {
                    infoMessage = $"User <strong>{user.Email}</strong> created successfully.";
                    CloseUserModal();
                    await LoadUsersAsync();
                }
                else
                {
                    errorMessage = string.Join("; ", result.Errors.Select(e => e.Description));
                }
            }
        }
        catch (Exception ex)
        {
            Logger.LogError(ex, "Failed to save user");
            errorMessage = "Failed to save user.";
        }
    }

    private void ShowDeleteConfirmation(ApplicationUser user)
    {
        userToDelete = user;
        showDeleteModal = true;
        ClearMessages();
    }

    private async Task DeleteUserConfirmed()
    {
        if (userToDelete == null) return;

        try
        {
            var result = await UserManager.DeleteAsync(userToDelete);
            if (result.Succeeded)
            {
                infoMessage = $"User <strong>{userToDelete.Email}</strong> deleted successfully.";
                CloseDeleteModal();
                await LoadUsersAsync();
            }
            else
            {
                errorMessage = string.Join("; ", result.Errors.Select(e => e.Description));
            }
        }
        catch (Exception ex)
        {
            Logger.LogError(ex, "Failed to delete user");
            errorMessage = "Failed to delete user.";
        }
    }

    private async Task ConfirmEmail(ApplicationUser user)
    {
        try
        {
            user.EmailConfirmed = true;
            var result = await UserManager.UpdateAsync(user);
            if (result.Succeeded)
            {
                infoMessage = $"Email confirmed for user <strong>{user.Email}</strong>.";
                await LoadUsersAsync();
            }
            else
            {
                errorMessage = string.Join("; ", result.Errors.Select(e => e.Description));
            }
        }
        catch (Exception ex)
        {
            Logger.LogError(ex, "Failed to confirm email");
            errorMessage = "Failed to confirm email.";
        }
    }

    private async Task LockUser(ApplicationUser user)
    {
        try
        {
            var result = await UserManager.SetLockoutEndDateAsync(user, DateTimeOffset.Now.AddYears(100));
            if (result.Succeeded)
            {
                infoMessage = $"User <strong>{user.Email}</strong> locked successfully.";
                await LoadUsersAsync();
            }
            else
            {
                errorMessage = string.Join("; ", result.Errors.Select(e => e.Description));
            }
        }
        catch (Exception ex)
        {
            Logger.LogError(ex, "Failed to lock user");
            errorMessage = "Failed to lock user.";
        }
    }

    private async Task UnlockUser(ApplicationUser user)
    {
        try
        {
            var result = await UserManager.SetLockoutEndDateAsync(user, null);
            if (result.Succeeded)
            {
                infoMessage = $"User <strong>{user.Email}</strong> unlocked successfully.";
                await LoadUsersAsync();
            }
            else
            {
                errorMessage = string.Join("; ", result.Errors.Select(e => e.Description));
            }
        }
        catch (Exception ex)
        {
            Logger.LogError(ex, "Failed to unlock user");
            errorMessage = "Failed to unlock user.";
        }
    }

    private void CloseUserModal()
    {
        showUserModal = false;
        userModel = new UserModel();
    }

    private void CloseDeleteModal()
    {
        showDeleteModal = false;
        userToDelete = null;
    }

    private void ClearMessages()
    {
        infoMessage = null;
        errorMessage = null;
    }

    private bool IsFormValid()
    {
        if (string.IsNullOrEmpty(userModel.UserName))
            return false;

        if (!isEditMode)
        {
            if (string.IsNullOrEmpty(userModel.Email))
                return false;
            
            if (string.IsNullOrEmpty(userModel.Password) || userModel.Password.Length < 6)
                return false;
            
            if (userModel.Password != userModel.ConfirmPassword)
                return false;
        }

        return true;
    }

    public class UserModel
    {
        public string? Id { get; set; }

        public string? FirstName { get; set; }

        public string? LastName { get; set; }

        [Required]
        [EmailAddress]
        public string Email { get; set; } = string.Empty;

        [Required]
        public string UserName { get; set; } = string.Empty;

        [Phone]
        public string? PhoneNumber { get; set; }

        public bool EmailConfirmed { get; set; }

        public string? Password { get; set; }

        [Compare("Password", ErrorMessage = "The password and confirmation password do not match.")]
        public string? ConfirmPassword { get; set; }

        public bool IsEditMode { get; set; }

        public bool IsPasswordRequired => !IsEditMode;
    }
}
