@inject ILogger<DocumentsTab> Logger
@inject DocumentClient DocumentClient
@inject IJSRuntime JSRuntime

<div class="tab-pane fade show active">
    <!-- Add Knowledge Button -->
    <div class="mb-4 d-flex justify-content-between align-items-center">
        <div>
            <p class="text-muted mb-0">Manage documents and knowledge for this folder</p>
        </div>
        <button class="btn btn-primary" @onclick="OpenAddKnowledgeDialog">
            <i class="bi bi-plus-circle me-2"></i>Add Knowledge
        </button>
    </div>

    <!-- Documents List -->
    <div>
        @if (isLoading)
        {
            <div class="d-flex justify-content-center py-4">
                <div class="spinner-border text-primary" role="status">
                    <span class="visually-hidden">Loading documents...</span>
                </div>
            </div>
        }
        else if (documents.Any())
        {
            <div class="d-none d-md-block table-responsive">
                <table class="table table-hover">
                    <thead class="table-light">
                        <tr>
                            <th style="width: 40%;">
                                <i class="bi bi-file-text me-2"></i>Document Name
                            </th>
                            <th style="width: 10%;" class="text-center">
                                <i class="bi bi-tag me-2"></i>Type
                            </th>
                            <th style="width: 15%;">
                                <i class="bi bi-tags me-2"></i>Tags
                            </th>
                            <th style="width: 15%;" class="text-center">
                                <i class="bi bi-calendar me-2"></i>Upload Date
                            </th>
                            <th style="width: 10%;" class="text-center">
                                <i class="bi bi-hdd me-2"></i>Size
                            </th>
                            <th style="width: 10%;" class="text-center">
                                <i class="bi bi-gear me-2"></i>Actions
                            </th>
                        </tr>
                    </thead>
                    <tbody>
                        @foreach (var doc in documents)
                        {
                            <tr>
                                <td>
                                    <div class="d-flex align-items-center">
                                        <i class="@FileTypeService.GetFileIcon(doc.Name) me-2"></i>
                                        <span>@doc.Name</span>
                                    </div>
                                </td>
                                <td class="text-center">
                                    <span class="badge @FileTypeService.GetTypeBadgeClass(doc.Name)">
                                        @FileTypeService.GetFileTypeDescription(doc.Name)
                                    </span>
                                </td>
                                <td>
                                    @if (doc.Tags.Any())
                                    {
                                        <div class="d-flex flex-wrap gap-1">
                                            @foreach (var tag in doc.Tags.Take(3))
                                            {
                                                <span class="badge bg-primary badge-sm">@tag</span>
                                            }
                                            @if (doc.Tags.Count > 3)
                                            {
                                                <span class="badge bg-secondary badge-sm">+@(doc.Tags.Count - 3)</span>
                                            }
                                        </div>
                                    }
                                    else
                                    {
                                        <span class="text-muted">No tags</span>
                                    }
                                </td>
                                <td class="text-center">@doc.UpdatedAt.ToString("MMM dd, yyyy")</td>
                                <td class="text-center"><span class="text-muted">--</span></td>
                                <td class="text-center">
                                    <div class="btn-group btn-group-sm" role="group">
                                        <button class="btn btn-outline-primary" @onclick="() => DownloadDocument(doc)" title="Download">
                                            <i class="bi bi-download"></i>
                                        </button>
                                        <button class="btn btn-outline-secondary" @onclick="() => ViewDocument(doc)" title="View">
                                            <i class="bi bi-eye"></i>
                                        </button>
                                        <button class="btn btn-outline-danger" @onclick="() => RemoveDocument(doc)" title="Remove">
                                            <i class="bi bi-trash"></i>
                                        </button>
                                    </div>
                                </td>
                            </tr>
                        }
                    </tbody>
                </table>
            </div>
            <!-- Mobile Card View -->
            <div class="d-block d-md-none">
                @foreach (var doc in documents)
                {
                    <div class="document-card mb-3 p-3 shadow-sm rounded bg-white">
                        <div class="d-flex align-items-center mb-2">
                            <i class="@FileTypeService.GetFileIcon(doc.Name) me-2 fs-4"></i>
                            <span class="fw-bold">@doc.Name</span>
                        </div>
                        <div class="mb-1">
                            <span class="text-muted">Type:</span>
                            <span class="badge @FileTypeService.GetTypeBadgeClass(doc.Name) ms-1">
                                @FileTypeService.GetFileTypeDescription(doc.Name)
                            </span>
                        </div>
                        <div class="mb-1">
                            <span class="text-muted">Tags:</span>
                            @if (doc.Tags.Any())
                            {
                                @foreach (var tag in doc.Tags.Take(3))
                                {
                                    <span class="badge bg-primary badge-sm ms-1">@tag</span>
                                }
                                @if (doc.Tags.Count > 3)
                                {
                                    <span class="badge bg-secondary badge-sm ms-1">+@(doc.Tags.Count - 3)</span>
                                }
                            }
                            else
                            {
                                <span class="text-muted ms-1">No tags</span>
                            }
                        </div>
                        <div class="mb-1">
                            <span class="text-muted">Uploaded:</span> @doc.UpdatedAt.ToString("MMM dd, yyyy")
                        </div>
                        <div class="mb-1">
                            <span class="text-muted">Size:</span> <span class="text-muted">--</span>
                        </div>
                        <div class="mt-2">
                            <div class="btn-group btn-group-sm w-100" role="group">
                                <button class="btn btn-outline-primary" @onclick="() => DownloadDocument(doc)" title="Download">
                                    <i class="bi bi-download"></i>
                                </button>
                                <button class="btn btn-outline-secondary" @onclick="() => ViewDocument(doc)" title="View">
                                    <i class="bi bi-eye"></i>
                                </button>
                                <button class="btn btn-outline-danger" @onclick="() => RemoveDocument(doc)" title="Remove">
                                    <i class="bi bi-trash"></i>
                                </button>
                            </div>
                        </div>
                    </div>
                }
            </div>
        }
        else
        {
            <div class="text-center py-5">
                <div class="mb-3">
                    <i class="bi bi-folder2-open display-1 text-muted"></i>
                </div>
                <h5 class="text-muted">No documents uploaded yet</h5>
                <p class="text-muted">Upload documents to provide knowledge to your agent</p>
                <button class="btn btn-primary" @onclick="OpenAddKnowledgeDialog">
                    <i class="bi bi-plus-circle me-2"></i>Add First Document
                </button>
            </div>
        }
    </div>
</div>

<!-- Add Knowledge Modal -->
@if (isAddKnowledgeDialogOpen)
{
    <div class="modal fade show" style="display: block;" tabindex="-1">
        <div class="modal-dialog modal-lg">
            <div class="modal-content">
                <div class="modal-header">
                    <h5 class="modal-title">
                        <i class="bi bi-plus-circle me-2"></i>Add Knowledge
                    </h5>
                    <button type="button" class="btn-close" @onclick="CloseAddKnowledgeDialog"></button>
                </div>
                <div class="modal-body">
                    <AddKnowledgeForm AgentId="AgentId" OnUploadCompleted="HandleUploadCompleted" FolderId="FolderId" />
                </div>
            </div>
        </div>
    </div>
    <div class="modal-backdrop fade show"></div>
}

<!-- Delete Confirmation Modal -->
@if (isDeleteConfirmationOpen)
{
    <div class="modal fade show" style="display: block;" tabindex="-1">
        <div class="modal-dialog">
            <div class="modal-content">
                <div class="modal-header">
                    <h5 class="modal-title">
                        <i class="bi bi-exclamation-triangle-fill text-danger me-2"></i>Confirm Deletion
                    </h5>
                    <button type="button" class="btn-close" @onclick="CancelDeleteDocument"></button>
                </div>
                <div class="modal-body">
                    <p>Are you sure you want to delete this document? This action cannot be undone.</p>
                    <p class="fw-bold">@documentToDelete?.Name</p>
                </div>
                <div class="modal-footer">
                    <button type="button" class="btn btn-secondary" @onclick="CancelDeleteDocument">Cancel</button>
                    <button type="button" class="btn btn-danger" @onclick="ConfirmDeleteDocument">
                        <i class="bi bi-trash me-2"></i>Delete
                    </button>
                </div>
            </div>
        </div>
    </div>
    <div class="modal-backdrop fade show"></div>
}

<!-- Document Viewer Modal -->
<DocumentViewerModal 
    Document="documentToView" 
    AgentId="AgentId" 
    IsVisible="isDocumentViewerOpen" 
    OnClose="CloseDocumentViewer"
    OnDownload="DownloadDocument" />

@code {
    [Parameter]
    public Guid AgentId { get; set; }

    [Parameter]
    public Guid? FolderId { get; set; }

    [Parameter]
    public int DocumentCount { get; set; }

    [Parameter]
    public EventCallback<int> DocumentCountChanged { get; set; }

    [Parameter]
    public bool OpenAddKnowledgeDialogOnLoad { get; set; }

    private bool isAddKnowledgeDialogOpen = false;
    private bool isLoading = true;
    private bool isDeleteConfirmationOpen = false;
    private bool isDocumentViewerOpen = false;

    private IList<DocumentListItem> documents = [];
    private DocumentListItem? documentToDelete;
    private DocumentListItem? documentToView;

    private Guid? _previousFolderId;

    protected override async Task OnInitializedAsync()
    {
        await LoadDocuments();
    }

    protected override async Task OnParametersSetAsync()
    {
        if (FolderId != _previousFolderId)
        {
            _previousFolderId = FolderId;
            await LoadDocuments();
        }

        if (OpenAddKnowledgeDialogOnLoad)
        {
            OpenAddKnowledgeDialog();
            OpenAddKnowledgeDialogOnLoad = false;
        }
    }
    private async Task LoadDocuments()
    {
        try
        {
            isLoading = true;
            documents = await DocumentClient.GetDocumentsByAgentIdAsync(AgentId, FolderId);
            await UpdateDocumentCount();
            StateHasChanged();
        }
        catch (Exception ex)
        {
            Logger.LogError(ex, "Error loading documents");
        }
        finally
        {
            isLoading = false;
        }
    }

    private async Task UpdateDocumentCount()
    {
        DocumentCount = documents.Count;
        await DocumentCountChanged.InvokeAsync(DocumentCount);
    }

    public void OpenAddKnowledgeDialog()
    {
        isAddKnowledgeDialogOpen = true;
        StateHasChanged();
    }

    private void CloseAddKnowledgeDialog()
    {
        isAddKnowledgeDialogOpen = false;
    }

    private async Task HandleUploadCompleted()
    {
        await LoadDocuments();
        CloseAddKnowledgeDialog();
    }

    private void RemoveDocument(DocumentListItem document)
    {
        documentToDelete = document;
        isDeleteConfirmationOpen = true;
    }

    private async Task ConfirmDeleteDocument()
    {
        if (documentToDelete == null) return;

        try
        {
            await DocumentClient.DeleteDocumentByIdAsync(AgentId, documentToDelete.Id);
            await LoadDocuments();
        }
        catch (Exception ex)
        {
            Logger.LogError(ex, "Error deleting document");
        }
        finally
        {
            isDeleteConfirmationOpen = false;
            documentToDelete = null;
        }
    }

    private void CancelDeleteDocument()
    {
        isDeleteConfirmationOpen = false;
        documentToDelete = null;
    }

    private void ViewDocument(DocumentListItem document)
    {
        documentToView = document;
        isDocumentViewerOpen = true;
    }

    private void CloseDocumentViewer()
    {
        isDocumentViewerOpen = false;
        documentToView = null;
    }

    private async Task DownloadDocument(DocumentListItem document)
    {
        try
        {
            var (content, fileName, contentType) = await DocumentClient.DownloadDocumentAsync(AgentId, document.Id);
            
            // Convert stream to byte array for JavaScript interop
            using var memoryStream = new MemoryStream();
            await content.CopyToAsync(memoryStream);
            var fileBytes = memoryStream.ToArray();
            
            // Use JavaScript to trigger download
            await JSRuntime.InvokeVoidAsync("downloadFile", fileName, Convert.ToBase64String(fileBytes), contentType);
        }
        catch (Exception ex)
        {
            Logger.LogError(ex, "Error downloading document {DocumentName}", document.Name);
        }
    }
}
