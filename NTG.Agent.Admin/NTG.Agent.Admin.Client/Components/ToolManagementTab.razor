@using NTG.Agent.Shared.Dtos.Tools

<div class="tab-pane fade" id="mcp-tools" role="tabpanel">
    <div class="row">
        <div class="col-lg-8">
            <div class="mb-4">
                <h5 class="mb-1">MCP Server Connection</h5>
                <p class="text-muted mb-0">Connect to an MCP server and explore registered tools.</p>
            </div>

            <EditForm Model="this" OnValidSubmit="ConnectToMcpServer">
                <div class="card border-0 bg-light">
                    <div class="card-body">
                        <div class="mb-3">
                            <label class="form-label fw-semibold">
                                <i class="bi bi-link-45deg me-2"></i>MCP Server Endpoint
                            </label>
                            <InputText @bind-Value="mcpEndpoint"
                                       class="form-control"
                                       placeholder="Enter MCP server endpoint (e.g., http://localhost:5136)" />
                        </div>

                        <div class="d-flex justify-content-end">
                            <button type="submit" class="btn btn-primary" disabled="@isConnecting">
                                @if (isConnecting)
                                {
                                    <span class="spinner-border spinner-border-sm me-2" role="status" aria-hidden="true"></span>
                                }
                                else
                                {
                                    <i class="bi bi-plug me-1"></i>
                                }
                                Connect
                            </button>
                        </div>
                    </div>
                </div>
            </EditForm>

            @if (!string.IsNullOrEmpty(statusMessage))
            {
                <div class="alert @(isConnected ? "alert-success" : "alert-danger") mt-3 d-flex align-items-center" role="alert">
                    <i class="@(isConnected ? "bi bi-check-circle-fill" : "bi bi-exclamation-triangle-fill") me-2"></i>
                    <div>@statusMessage</div>
                </div>
            }

            @if (isConnected && mcpTools?.Any() == true)
            {
                <div class="card border-0 bg-light mt-3">
                    <div class="card-body">
                        <h6 class="card-title">
                            <i class="bi bi-wrench me-2"></i>Available MCP Tools
                        </h6>
                        <ul class="list-group list-group-flush small">
                            @foreach (var tool in mcpTools)
                            {
                                <li class="list-group-item">
                                    <strong>@tool.Name</strong>
                                    <div class="text-muted">@tool.Description</div>
                                </li>
                            }
                        </ul>
                    </div>
                </div>
            }
        </div>
    </div>
</div>

@code {
    private string mcpEndpoint = "http://localhost:5136";
    private bool isConnecting = false;
    private bool isConnected = false;
    private string statusMessage = string.Empty;
    private List<ToolDto>? mcpTools;

    private async Task ConnectToMcpServer()
    {
        try
        {
            isConnecting = true;
            statusMessage = string.Empty;
            mcpTools = null;
            isConnected = false;

            // await using var client = await McpClient.CreateAsync(new SseClientTransport(new()
            //     {
            //         Name = "UserMcpServer",
            //         Endpoint = new Uri(mcpEndpoint)
            //     }));

            // mcpTools = await client.ListToolsAsync().ToListAsync();

            if (mcpTools?.Any() == true)
            {
                isConnected = true;
                statusMessage = $"Connected successfully! {mcpTools.Count} tools found.";
            }
            else
            {
                statusMessage = "Connected, but no tools found.";
            }
        }
        catch (Exception ex)
        {
            statusMessage = $"Failed to connect: {ex.Message}";
        }
        finally
        {
            isConnecting = false;
        }
    }
}
