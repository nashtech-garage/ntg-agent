@using Microsoft.AspNetCore.Components.Forms
@inject DocumentClient DocumentClient
@inject TagClient TagClient
@inject ILogger<AddKnowledgeForm> Logger

<div class="row">
    <div class="col-12">

         <!-- Tags Selection Section -->
        <div class="mb-4">
            <h6 class="mb-3">
                <i class="bi bi-tags me-2"></i>Document Tags <span class="text-danger">*</span>
            </h6>
            <p class="text-muted small mb-3">Select one or more tags to categorize this document. These tags control who can access the document.</p>
            
            <!-- Selected Tags Display -->
            @if (selectedTags.Any())
            {
                <div class="mb-3">
                    <label class="form-label">Selected Tags:</label>
                    <div class="d-flex flex-wrap gap-2">
                        @foreach (var tag in selectedTags)
                        {
                            <span class="badge bg-primary d-flex align-items-center">
                                @tag.Name
                                <button type="button" class="btn-close btn-close-white ms-2" 
                                        @onclick="() => RemoveTag(tag)"
                                        style="font-size: 0.7em;"></button>
                            </span>
                        }
                    </div>
                </div>
            }

            <!-- Available Tags -->
            <div class="mb-3">
                <label class="form-label">Available Tags:</label>
                <div class="d-flex flex-wrap gap-2 mb-2">
                    @foreach (var tag in GetUnselectedTags())
                    {
                        <button type="button" class="btn btn-outline-secondary btn-sm" 
                                @onclick="() => AddTag(tag)">
                            <i class="bi bi-plus-circle me-1"></i>@tag.Name
                        </button>
                    }
                </div>
                @if (!GetUnselectedTags().Any())
                {
                    <p class="text-muted small">All available tags are already selected.</p>
                }
            </div>

            <!-- Quick Add Tag -->
            <div class="input-group">
                <span class="input-group-text">
                    <i class="bi bi-tag"></i>
                </span>
                <input type="text" 
                       class="form-control" 
                       placeholder="Enter new tag name" 
                       @bind="newTagName"
                       @onkeypress="HandleTagKeyPress" />
                <button class="btn btn-outline-primary" 
                        @onclick="CreateAndAddTag" 
                        disabled="@(string.IsNullOrWhiteSpace(newTagName) || isCreatingTag)">
                    @if (isCreatingTag)
                    {
                        <span class="spinner-border spinner-border-sm me-1"></span>
                    }
                    <i class="bi bi-plus"></i>
                </button>
            </div>
            <div class="form-text">Create a new tag and add it to this document</div>

            @if (!string.IsNullOrEmpty(tagErrorMessage))
            {
                <div class="alert alert-danger mt-2 py-2">
                    <small>@tagErrorMessage</small>
                </div>
            }

            @if (selectedTags.Count == 0)
            {
                <div class="alert alert-warning mt-2 py-2">
                    <small><i class="bi bi-exclamation-triangle me-1"></i>Please select at least one tag for the document.</small>
                </div>
            }
        </div>

        <!-- Upload Section -->
        <div class="mb-4">
            <h6 class="mb-3">
                <i class="bi bi-cloud-upload me-2"></i>Upload Files
            </h6>
            <div class="border border-dashed border-2 rounded p-4 text-center bg-light">
                <div class="mb-3">
                    <i class="bi bi-file-earmark-arrow-up display-4 text-muted"></i>
                </div>
                <h6 class="mb-2">Drag and drop files here or click to browse</h6>
                <p class="text-muted small mb-3">@FileTypeService.GetSupportedFormatsDescription()</p>
                <InputFile OnChange="HandleFileUpload" 
                          class="form-control" 
                          multiple 
                          accept="@FileTypeService.GetSupportedFileExtensions()" 
                          id="fileUpload" />
            </div>
        </div>

        <!-- URL Upload Section -->
        <div class="mb-4">
            <h6 class="mb-3">
                <i class="bi bi-link-45deg me-2"></i>Add from URL
            </h6>
            <div class="input-group">
                <span class="input-group-text">
                    <i class="bi bi-globe"></i>
                </span>
                <input type="url" 
                       class="form-control" 
                       placeholder="https://example.com/document.pdf" 
                       @bind="urlInput" />
                <button class="btn btn-outline-primary" 
                        @onclick="HandleUrlUpload" 
                        disabled="@(string.IsNullOrWhiteSpace(urlInput) || isUploading)">
                    <i class="bi bi-plus"></i>
                </button>
            </div>
            <div class="form-text">Enter a URL to automatically fetch and process the document</div>
        </div>

        <!-- Text Input Section -->
        <div class="mb-4">
            <h6 class="mb-3">
                <i class="bi bi-textarea-t me-2"></i>Add text content directly
            </h6>
            <div class="mb-3">
                <input type="text" 
                       class="form-control mb-2" 
                       placeholder="Document title" 
                       @bind="textTitle" />
                <textarea class="form-control" 
                         rows="6" 
                         placeholder="Paste or type your content here..." 
                         @bind="textContent"></textarea>
            </div>
            <button class="btn btn-outline-primary" 
                    @onclick="HandleTextUpload" 
                    disabled="@(string.IsNullOrWhiteSpace(textContent) || isUploading)">
                <i class="bi bi-plus-circle me-2"></i>Add Text Content
            </button>
        </div>

        <!-- Upload Status -->
        @if (uploadItems.Any())
        {
            <div class="mb-3">
                <h6 class="mb-3">Upload Progress</h6>
                @foreach (var item in uploadItems)
                {
                    <div class="card mb-2">
                        <div class="card-body p-3">
                            <div class="d-flex align-items-center">
                                <div class="me-3">
                                    @if (item.Status == UploadStatus.Uploading)
                                    {
                                        <div class="spinner-border spinner-border-sm text-primary" role="status">
                                            <span class="visually-hidden">Uploading...</span>
                                        </div>
                                    }
                                    else if (item.Status == UploadStatus.Success)
                                    {
                                        <i class="bi bi-check-circle-fill text-success"></i>
                                    }
                                    else
                                    {
                                        <i class="bi bi-x-circle-fill text-danger"></i>
                                    }
                                </div>
                                <div class="flex-grow-1">
                                    <div class="fw-medium">@item.Name</div>
                                    <small class="text-muted">@item.Message</small>
                                </div>
                                @if (item.Status == UploadStatus.Uploading)
                                {
                                    <div class="progress" style="width: 100px;">
                                        <div class="progress-bar" role="progressbar" style="width: @(item.Progress)%"></div>
                                    </div>
                                }
                            </div>
                        </div>
                    </div>
                }
            </div>
        }

        @if (!string.IsNullOrEmpty(generalMessage))
        {
            <div class="alert @(isError ? "alert-danger" : "alert-success") d-flex align-items-center" role="alert">
                <i class="@(isError ? "bi bi-exclamation-triangle-fill" : "bi bi-check-circle-fill") me-2"></i>
                <div>@generalMessage</div>
            </div>
        }
    </div>
</div>

@code {
    [Parameter]
    public Guid AgentId { get; set; }

    [Parameter]
    public Guid? FolderId { get; set; }

    [Parameter]
    public EventCallback OnUploadCompleted { get; set; }

    private string urlInput = string.Empty;
    private string textContent = string.Empty;
    private string textTitle = string.Empty;
    private string generalMessage = string.Empty;
    private bool isError = false;
    private bool isUploading = false;
    private int MAX_FILE_UPLOAD = 10;

    // Tags related fields
    private List<TagDto> availableTags = new();
    private List<TagDto> selectedTags = new();
    private string newTagName = string.Empty;
    private string tagErrorMessage = string.Empty;
    private bool isCreatingTag = false;

    private List<UploadItem> uploadItems = new();

    protected override async Task OnInitializedAsync()
    {
        await LoadAvailableTags();
    }

    private async Task LoadAvailableTags()
    {
        try
        {
            availableTags = await TagClient.GetTagsAsync();
            
            // Set "Public" tag as default if it exists
            var publicTag = availableTags.FirstOrDefault(t => t.Name.Equals("Public", StringComparison.OrdinalIgnoreCase));
            if (publicTag != null)
            {
                selectedTags.Add(publicTag);
            }
        }
        catch (Exception ex)
        {
            Logger.LogError(ex, "Error loading available tags");
            tagErrorMessage = "Failed to load available tags. Please refresh the page.";
        }
        finally
        {
            StateHasChanged();
        }
    }

    private List<TagDto> GetUnselectedTags()
    {
        var selectedTagIds = selectedTags.Select(t => t.Id).ToHashSet();
        return availableTags.Where(t => !selectedTagIds.Contains(t.Id)).ToList();
    }

    private void AddTag(TagDto tag)
    {
        if (!selectedTags.Any(t => t.Id == tag.Id))
        {
            selectedTags.Add(tag);
            tagErrorMessage = string.Empty;
        }
    }

    private void RemoveTag(TagDto tag)
    {
        selectedTags.RemoveAll(t => t.Id == tag.Id);
    }

    private async Task HandleTagKeyPress(KeyboardEventArgs e)
    {
        if (e.Key == "Enter")
        {
            await CreateAndAddTag();
        }
    }

    private async Task CreateAndAddTag()
    {
        if (string.IsNullOrWhiteSpace(newTagName) || isCreatingTag)
            return;

        try
        {
            isCreatingTag = true;
            tagErrorMessage = string.Empty;

            var tagName = newTagName.Trim();
            
            // Check if tag already exists
            if (availableTags.Any(t => t.Name.Equals(tagName, StringComparison.OrdinalIgnoreCase)))
            {
                tagErrorMessage = $"Tag '{tagName}' already exists.";
                return;
            }

            // Create new tag
            var newTag = await TagClient.CreateTagAsync(new TagCreateDto(tagName));
            
            // Add to available tags and select it
            availableTags.Add(newTag);
            selectedTags.Add(newTag);
            
            newTagName = string.Empty;
        }
        catch (Exception ex)
        {
            Logger.LogError(ex, "Error creating new tag: {TagName}", newTagName);
            tagErrorMessage = $"Failed to create tag: {ex.Message}";
        }
        finally
        {
            isCreatingTag = false;
            StateHasChanged();
        }
    }

    private List<string> GetSelectedTagIds()
    {
        return selectedTags.Select(t => t.Id.ToString()).ToList();
    }

    private async Task HandleFileUpload(InputFileChangeEventArgs e)
    {
        // Validate tags are selected
        if (selectedTags.Count == 0)
        {
            tagErrorMessage = "Please select at least one tag before uploading files.";
            return;
        }

        isUploading = true;
        generalMessage = string.Empty;
        tagErrorMessage = string.Empty;

        try
        {
            var files = e.GetMultipleFiles(MAX_FILE_UPLOAD);

            foreach (var file in files)
            {
                var uploadItem = new UploadItem
                {
                    Name = file.Name,
                    Status = UploadStatus.Uploading,
                    Message = "Uploading...",
                    Progress = 0
                };
                uploadItems.Add(uploadItem);
                StateHasChanged();

                try
                {
                    // Simulate progress
                    for (int i = 0; i <= 100; i += 20)
                    {
                        uploadItem.Progress = i;
                        StateHasChanged();
                        await Task.Delay(200);
                    }
                    
                    // Use selected tags
                    var tagIds = GetSelectedTagIds();
                    await DocumentClient.UploadDocumentsAsync(AgentId, new List<IBrowserFile> { file }, FolderId, tagIds);

                    uploadItem.Status = UploadStatus.Success;
                    uploadItem.Message = "Successfully uploaded";
                }
                catch (Exception ex)
                {
                    uploadItem.Status = UploadStatus.Error;
                    uploadItem.Message = $"Error: {ex.Message}";
                }
                
                StateHasChanged();
            }

            // Clear upload items after a delay
            await Task.Delay(3000);
            uploadItems.Clear();
            await OnUploadCompleted.InvokeAsync();
        }
        catch (Exception ex)
        {
            generalMessage = $"Upload failed: {ex.Message}";
            isError = true;
        }
        finally
        {
            isUploading = false;
            StateHasChanged();
        }
    }

    private async Task HandleUrlUpload()
    {
        if (string.IsNullOrWhiteSpace(urlInput)) return;

        // Validate tags are selected
        if (selectedTags.Count == 0)
        {
            tagErrorMessage = "Please select at least one tag before importing from URL.";
            return;
        }

        isUploading = true;
        generalMessage = string.Empty;
        tagErrorMessage = string.Empty;

        var uploadItem = new UploadItem
        {
            Name = urlInput,
            Status = UploadStatus.Uploading,
            Message = "Fetching from URL...",
            Progress = 50
        };
        uploadItems.Add(uploadItem);
        StateHasChanged();

        try
        {
            var tagIds = GetSelectedTagIds();
            var documentId = await DocumentClient.ImportWebPageAsync(AgentId, urlInput, FolderId, tagIds);

            uploadItem.Status = UploadStatus.Success;
            uploadItem.Message = "Successfully processed URL content";
            StateHasChanged();

            urlInput = string.Empty;
            
            await Task.Delay(2000);
            uploadItems.Clear();
            await OnUploadCompleted.InvokeAsync();
        }
        catch (Exception ex)
        {
            uploadItem.Status = UploadStatus.Error;
            uploadItem.Message = $"Error: {ex.Message}";
            generalMessage = $"URL upload failed: {ex.Message}";
            isError = true;
            StateHasChanged();
        }
        finally
        {
            isUploading = false;
            StateHasChanged();
        }
    }

    private async Task HandleTextUpload()
    {
        if (string.IsNullOrWhiteSpace(textContent)) return;

        // Validate tags are selected
        if (selectedTags.Count == 0)
        {
            tagErrorMessage = "Please select at least one tag before uploading text content.";
            return;
        }

        isUploading = true;
        generalMessage = string.Empty;
        tagErrorMessage = string.Empty;

        try
        {
            var title = string.IsNullOrWhiteSpace(textTitle) ? "Text Content" : textTitle;
            
            var uploadItem = new UploadItem
            {
                Name = title,
                Status = UploadStatus.Uploading,
                Message = "Processing text content...",
                Progress = 50
            };
            uploadItems.Add(uploadItem);
            StateHasChanged();

            var tagIds = GetSelectedTagIds();
            var documentId = await DocumentClient.UploadTextContentAsync(AgentId, title, textContent, FolderId, tagIds);

            uploadItem.Status = UploadStatus.Success;
            uploadItem.Message = "Successfully added text content";
            StateHasChanged();

            textContent = string.Empty;
            textTitle = string.Empty;
            
            await Task.Delay(2000);
            uploadItems.Clear();
            await OnUploadCompleted.InvokeAsync();
        }
        catch (Exception ex)
        {
            generalMessage = $"Text upload failed: {ex.Message}";
            isError = true;
        }
        finally
        {
            isUploading = false;
            StateHasChanged();
        }
    }
}
