@inject ILogger<DocumentViewerModal> Logger
@inject DocumentClient DocumentClient
@inject IJSRuntime JSRuntime

@if (IsVisible)
{
    <div class="modal fade show document-viewer-modal" style="display: block;" tabindex="-1">
        <div class="modal-dialog">
            <div class="modal-content">
                <div class="modal-header">
                    <h5 class="modal-title">
                        <i class="@FileTypeService.GetFileIcon(Document?.Name ?? "") me-2"></i>@Document?.Name
                    </h5>
                    <button type="button" class="btn-close" @onclick="CloseModal" aria-label="Close"></button>
                </div>
                <div class="modal-body p-0">
                    <div class="document-viewer-content">
                        @if (isLoading)
                        {
                            <div class="document-viewer-loading">
                                <div class="spinner-border text-primary" role="status">
                                    <span class="visually-hidden">Loading document...</span>
                                </div>
                            </div>
                        }
                        else if (!string.IsNullOrEmpty(errorMessage))
                        {
                            <div class="alert alert-danger document-viewer-error" role="alert">
                                <i class="bi bi-exclamation-triangle-fill me-2"></i>
                                @errorMessage
                            </div>
                        }
                        else if (FileTypeService.GetDocumentViewType(Document?.Name ?? "") == DocumentViewType.Binary)
                        {
                            <div class="alert alert-info document-viewer-binary m-4" role="alert">
                                <div class="d-flex align-items-start">
                                    <i class="bi bi-file-earmark-@FileTypeService.GetBinaryFileTypeIcon(Document?.Name ?? "") me-3 fs-1 text-primary"></i>
                                    <div>
                                        <h5 class="alert-heading">
                                            <i class="bi bi-info-circle me-2"></i>Preview Not Available
                                        </h5>
                                        <p class="mb-3">
                                            This <strong>@FileTypeService.GetFileTypeDescription(Document?.Name ?? "")</strong> document cannot be previewed directly in the browser. 
                                            The file contains binary data that requires specialized software to view properly.
                                        </p>
                                        <div class="d-flex align-items-center gap-2">
                                            <i class="bi bi-arrow-down-circle text-primary"></i>
                                            <span class="text-muted">
                                                Click the <strong>"Download"</strong> button below to save and open this file in your default application.
                                            </span>
                                        </div>
                                    </div>
                                </div>
                            </div>
                        }
                        else if (FileTypeService.GetDocumentViewType(Document?.Name ?? "") == DocumentViewType.WebPage)
                        {
                            <div class="alert alert-info m-4" role="alert">
                                <div class="d-flex align-items-start">
                                    <i class="bi bi-globe me-3 fs-1 text-primary"></i>
                                    <div>
                                        <h5 class="alert-heading">
                                            <i class="bi bi-info-circle me-2"></i>Web Page Document
                                        </h5>
                                        <p class="mb-3">
                                            This is a web page that was imported from a URL. The content cannot be previewed directly in this modal for security reasons.
                                        </p>
                                        <div class="d-flex gap-2 mb-2">
                                            <button type="button" class="btn btn-primary btn-sm" @onclick="() => OpenWebPageInNewTab()">
                                                <i class="bi bi-box-arrow-up-right me-2"></i>Open in New Tab
                                            </button>
                                            <span class="text-muted align-self-center">or download to save the content locally</span>
                                        </div>
                                        <small class="text-muted">
                                            <i class="bi bi-shield-check me-1"></i>
                                            Opening in a new tab is recommended for the best viewing experience.
                                        </small>
                                    </div>
                                </div>
                            </div>
                        }
                        else if (!string.IsNullOrEmpty(documentContent))
                        {
                            @switch (FileTypeService.GetDocumentViewType(Document?.Name ?? ""))
                            {
                                case DocumentViewType.Text:
                                    {
                                        var textLanguageInfo = FileTypeService.GetTextLanguageInfo(Document?.Name ?? "", Document?.Id.ToString() ?? "");
                                        var languageClass = textLanguageInfo.languageClass;
                                        var elementId = textLanguageInfo.elementId;
                                        var dataLanguage = FileTypeService.GetDataLanguageAttribute(Document?.Name ?? "");
                                    
                                        @if (!string.IsNullOrEmpty(languageClass))
                                        {
                                            <div class="text-viewer p-4" data-language="@dataLanguage">
                                                <pre><code class="@languageClass" id="@elementId">@documentContent</code></pre>
                                            </div>
                                        }
                                        else
                                        {
                                            <pre class="p-4">@documentContent</pre>
                                        }
                                    }
                                    break;
                                
                                case DocumentViewType.Json:
                                    <div class="json-viewer p-4">
                                        <pre><code class="language-json" id="json-content-@(Document?.Id ?? Guid.Empty)">@FormatJson(documentContent)</code></pre>
                                    </div>
                                    break;
                                
                                case DocumentViewType.Html:
                                    <div class="html-viewer p-4">
                                        <div class="alert alert-info mb-3" role="alert">
                                            <i class="bi bi-info-circle me-2"></i>
                                            <strong>HTML Content Preview</strong> - This is a preview of the webpage content. Some interactive features may be disabled for security.
                                        </div>
                                        <div class="iframe-container border rounded">
                                            <iframe 
                                                srcdoc="@documentContent" 
                                                sandbox="allow-same-origin"
                                                style="width: 100%; height: 400px; border: none;"
                                                title="HTML Document Preview">
                                            </iframe>
                                        </div>
                                    </div>
                                    break;
                                
                                case DocumentViewType.Xml:
                                    <div class="xml-viewer p-4">
                                        <pre><code class="language-xml" id="xml-content-@(Document?.Id ?? Guid.Empty)">@documentContent</code></pre>
                                    </div>
                                    break;
                            }
                        }
                    </div>
                </div>
                <div class="modal-footer">
                    <button type="button" class="btn btn-outline-secondary" @onclick="CloseModal">
                        <i class="bi bi-x-lg me-1"></i>Close
                    </button>
                    <button type="button" class="btn btn-primary" @onclick="DownloadDocument">
                        <i class="bi bi-download me-1"></i>Download
                    </button>
                </div>
            </div>
        </div>
    </div>
    <div class="modal-backdrop fade show"></div>
}

@code {
    [Parameter] public DocumentListItem? Document { get; set; }
    [Parameter] public Guid AgentId { get; set; }
    [Parameter] public bool IsVisible { get; set; }
    [Parameter] public EventCallback OnClose { get; set; }
    [Parameter] public EventCallback<DocumentListItem> OnDownload { get; set; }

    private bool isLoading = false;
    private string? documentContent;
    private string? contentType;
    private string? errorMessage;
    private bool shouldHighlight = false;

    protected override async Task OnParametersSetAsync()
    {
        if (IsVisible && Document != null && string.IsNullOrEmpty(documentContent))
        {
            await LoadDocumentContent();
        }

        if (!IsVisible)
        {
            // Reset state when modal is closed
            documentContent = null;
            contentType = null;
            errorMessage = null;
            shouldHighlight = false;
        }
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (IsVisible && !string.IsNullOrEmpty(documentContent) && Document != null && shouldHighlight)
        {
            try
            {
                var viewType = FileTypeService.GetDocumentViewType(Document.Name);
                if (viewType == DocumentViewType.Json)
                {
                    await JSRuntime.InvokeVoidAsync("highlightElement", $"json-content-{Document.Id}");
                }
                else if (viewType == DocumentViewType.Xml)
                {
                    await JSRuntime.InvokeVoidAsync("highlightElement", $"xml-content-{Document.Id}");
                }
                else if (viewType == DocumentViewType.Text)
                {
                    var textLanguageInfo = FileTypeService.GetTextLanguageInfo(Document.Name, Document.Id.ToString());
                    if (!string.IsNullOrEmpty(textLanguageInfo.elementId))
                    {
                        await JSRuntime.InvokeVoidAsync("highlightElement", textLanguageInfo.elementId);
                    }
                }
                else
                {
                    await JSRuntime.InvokeVoidAsync("highlightCode");
                }
                shouldHighlight = false;
            }
            catch (Exception ex)
            {
                Logger.LogWarning(ex, "Failed to highlight syntax");
            }
        }
    }

    private async Task LoadDocumentContent()
    {
        if (Document == null) return;

        try
        {
            isLoading = true;
            errorMessage = null;
            var viewType = FileTypeService.GetDocumentViewType(Document.Name);

            if (viewType == DocumentViewType.Binary) return;
            
            var (content, type) = await DocumentClient.ViewDocumentAsync(AgentId, Document.Id);
            documentContent = content;
            contentType = type;
            shouldHighlight = true;
        }
        catch (Exception ex)
        {
            Logger.LogError(ex, "Error loading document content for {DocumentName}", Document.Name);
            errorMessage = "Failed to load document content. The document might be too large or in an unsupported format.";
        }
        finally
        {
            isLoading = false;
        }
    }

    private string FormatJson(string json)
    {
        try
        {
            using var document = JsonDocument.Parse(json);
            using var stream = new MemoryStream();
            using var writer = new Utf8JsonWriter(stream, new JsonWriterOptions
            {
                Indented = true,
                IndentSize = 2,
                IndentCharacter = ' '
            });
            
            document.WriteTo(writer);
            writer.Flush();
            
            return Encoding.UTF8.GetString(stream.ToArray());
        }
        catch
        {
            return json;
        }
    }

    private async Task CloseModal()
    {
        await OnClose.InvokeAsync();
    }

    private async Task DownloadDocument()
    {
        if (Document != null)
        {
            await OnDownload.InvokeAsync(Document);
        }
    }

    private async Task OpenWebPageInNewTab()
    {
        if (Document?.Name != null)
        {
            await JSRuntime.InvokeVoidAsync("openInNewTab", Document.Name);
        }
    }
}
